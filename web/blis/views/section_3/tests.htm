<div class="FlexDisplay FlexColumn container"  style="margin:0px; padding:0px; height:100%;">
	<div class="FlexDisplay" style="background:#535FD7; height:48px; box-shadow:0 1px 2px rgba(0, 0, 0, 0.3);" >
		<div id="backBtn"  class="nav-button" >
			<i class="mdi mdi-apps"></i>
		</div>
		<div class="FlexDisplay">
			<span class="BLIS-Title" style="white-space:nowrap; overflow:hidden; text-overflow: ellipsis; font-weight:normal; font-size:12px; color:#ffffff; margin:auto 8px;">Basic Laboratory Information System</span>
		</div>
		<div class="FlexDisplay FlexGrow" style="height:100%;"></div>
		<div class="clear-test dropdown" tooltip="Clear" flow="down">
			<div class="nav-button transparent dropdown">
				<i class="mdi mdi-sync-circle"></i>
			</div>
			<div class="submenu">
				<ul class="root"/>
			</div>
		</div>
		<div class="save dropdown" tooltip="save" flow="down">
			<div class="nav-button transparent dropdown">
				<i class="mdi mdi-check-circle"></i>
			</div>
			<div class="submenu">
				<ul class="root"/>
			</div>
		</div>
	</div>
	<div class="FlexDisplay Flex ContentPage  inner-section FadeIn"  style="width:100%; height:1px;">		
		<div class="FlexDisplay FlexBoxSizing-BorderBox" style="min-width:272px; max-width:272px;  height:100%; overflow: hidden; position:relative;">
				<div class="FlexBoxSizing-BorderBox active" style="padding:16px 0px 16px 16px; height:100%; min-width:256px; max-width:256px;">
					<div class="page-container Flex FlexColumn Overflow-Hidden inner-container Round Shadow" style="position:relative;  height:calc(100% - 0px); width:100%;">
						<div class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox" style="width:100%; height:calc(100% - 0px);  z-index:2;">
							<div class="FlexDisplay FlexRow Divider-Bottom" style="height:32px; " >
								<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal;">TESTS</h4>
							</div>
							<div class="FlexDisplay Flex FlexColumn FlexBoxSizing-BorderBox scroll scroll2 TestsList" style="overflow-y:auto;"></div>
						</div>
					</div>
				</div>
			</div>
		
		<div class="FlexDisplay FlexBoxSizing-BorderBox" style="width:100%; height:100%; overflow: hidden; position:relative;">
			<div style="width:100%; height:100%; margin:16px 16px 16px 0px;">
				<div class="page-container Flex FlexColumn Overflow-Hidden inner-container Round Shadow" style="position:relative; height:calc(100% - 32px);  width:100%;">
					<div class="FlexDisplay FlexRow Divider-Bottom" style="height:32px; " >
						<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal;">TEST</h4>
						<div class="FlexDisplay FlexGrow" style="height:100%;"></div>
						<div onclick="previous(this)" class="nav-button prev transparent disable" style="height:32px; width:24px; " onclick="proceedTo(this,0)">
							<i class="mdi mdi-chevron-left" style="margin:0px 0px 0px 0px;"></i>
						</div>
						<div onclick="next(this)" class="nav-button next transparent" style="height:32px; width:24px; " >
							<i class="mdi mdi-chevron-right" style="margin:0px 0px 0px 0px;"></i>
						</div>
					</div>
					<div class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox" style="width:100%;  height:calc(100% - 32px); z-index:2; position:relative;">
						
						<div class="animated-sub-page TestPage FlexColumn FlexBoxSizing-BorderBox active scroll scroll2" data-path="section-0"  style="width:100%; height:100%; overflow-y:auto; overflow-x:auto; display: block;">	
							<div class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox" style="width:100%; margin:0px 0px 16px 0px;">
								
								<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:8px 0px 0px 0px;" >
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Name</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Description</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 4px; font-size: 12px; font-weight:normal; line-height:16px;">Lab Section</h4>
									</div>
								</div>
								<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:0px 8px;">						
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-flask-outline" />
											</div>
											<input class="test-name-input" type="text" placeholder="Name"/>
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-flask-outline" />
											</div>
											<input class="description-input" type="text" placeholder="Description"/>
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px;">
											<div class="icon">
												<i class="mdi mdi-flask-outline" />
											</div>
											<select class="lab-sections" onchange="section_selected(this)">
											</select>
										</div>
									</div>
								</div>
								
								<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:8px 0px 0px 0px;" >
									<div class="FlexDisplay Flex FlexGrow-2" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Clinical Data</h4>
									</div>
									<div class="FlexHidden Flex FlexGrow SectionNameTitle" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 4px; font-size: 12px; font-weight:normal; line-height:16px;">Section Name</h4>
									</div>
								</div>
								<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:0px 8px;">						
									<div class="FlexDisplay Flex FlexGrow-2" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-flask-outline" />
											</div>
											<input class="clinical-data-input" type="text" placeholder="Clinical Data"/>
										</div>
									</div>
									<div class="FlexHidden Flex FlexGrow SectionNameInput" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-flask-outline" />
											</div>
											<input class="section-name-input" type="text" placeholder="Section Name"/>
										</div>
									</div>
								</div>
								
								
								<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:8px 0px 0px 0px;" >
									<div class="FlexDisplay Flex" style="min-width:150px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Panel Test</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:160px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Hide Patient Name in Report</h4>
									</div>
								</div>
								<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:0px 8px;">						
									<div class="FlexDisplay Flex" style="min-width:150px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-tray-full" />
											</div>
											<select class="panel-tests">
												<option selected="">No</option>
												<option>Yes</option>
											</select>
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:160px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-file-chart" />
											</div>
											<select class="hide-patient-name">
												<option selected="">No</option>
												<option>Yes</option>
											</select>
										</div>
									</div>
								</div>
								
								<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:8px 0px 0px 0px;" >
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Prevalence Threshold</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Target TAT</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 4px; font-size: 12px; font-weight:normal; line-height:16px;">Cost To Patient</h4>
									</div>
								</div>
								<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:0px 8px;">						
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-menu-open" />
											</div>
											<input onkeypress='return event.charCode >= 48 && event.charCode <= 57' class="prevalence-threshold-input" type="text" placeholder="Prevalence Threshold"/>
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-timelapse" />
											</div>
											<input onkeypress='return event.charCode >= 48 && event.charCode <= 57' class="target-tat-input" type="text" placeholder="Target TAT"/>
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-cash-usd" />
											</div>
											<input onkeypress='return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 46' class="cost-to-patient-input" type="text" placeholder="Cost To Patient"/>
										</div>
									</div>
								</div>
								
							</div>
							<div class="FlexDisplay FlexColumn Flex FlexBoxSizing-BorderBox Divider-Top" style="width:100%; margin:8px 0px 8px 0px;">
								<div class="FlexDisplay FlexRow Divider-Bottom" style="height:32px; " >
									<div class="FlexDisplay Flex">
										<h4 class="feature-title mt-0" style="margin:8px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Measures</h4>
									</div>
									<div id="addTests" class="FlexDisplay btn-clear">
										<div style="margin:auto auto; width:16px height:16px; padding:0px 16px;"><i class="mdi mdi-flask-plus-outline" /></div>
									</div>
								</div>
								<div class="FlexDisplay Flex FlexColumn FlexBoxSizing-BorderBox MeasuresList"></div>
							</div>
						</div>
						<div class="animated-sub-page FlexColumn FlexBoxSizing-BorderBox" data-path="section-1"  style="width:100%; height:100%;">	
							<div class="FlexDisplay FlexColumn" style="width:100%;  height:calc(100% - 0px);">
								<div class="FlexDisplay FlexRow Divider-Bottom" style="height:32px; " >
									<div class="FlexDisplay Flex">
										<h4 class="feature-title mt-0" style="margin:8px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Compatible Specimens</h4>
									</div>
								</div>
								<div class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox">
									<div class="FlexDisplay FlexRow Divider-Bottom" style="min-height:32px;">
										<div class="FlexDisplay FlexRow Divider-Right" style="min-height:32px; min-width:40px; max-width:40px">
											<h4 class="feature-title mt-0" style="width:100%; margin:0px 0px 0px 0px; font-size: 12px; font-weight:normal; text-align:center;"></h4>
										</div>
										<div class="FlexDisplay Flex FlexRow Divider-Right" style="min-height:32px; min-width:128px;">
											<h4 class="feature-title mt-0" style="margin:0px 12px 0px 12px; font-size: 12px; font-weight:normal;">Specimen</h4>
										</div>
									</div>
								</div>
								<div class="FlexDisplay Flex FlexColumn FlexBoxSizing-BorderBox scroll scroll2 CompatibleSpecimenList" style="overflow-y:auto;"></div>
							</div>
						</div>
						
					</div>			
				</div>
			</div>
		</div>
	</div>
</div>
<script>
var compatibleSpecimens = [];
var transitioning = false;

function getMeasurement(item){
	var measurement = null;
	
	var _testType = item.find(":first-child .select-dropdown.test-type").find(".current").text();
	var _name = item.find(":first-child .measurement-name").val().trim();
	var _unitDefault = item.find(":first-child .measurement-unit-default").val().trim();
	
	if(_name.length > 0){
		measurement = {
			TestType:_testType,
			Name:_name,
			UnitDefault:_unitDefault
		};
		
		if(_testType == "Numeric Range"){
			measurement.Information = [];
			item.find(".TestItemInfo").children().each(function(index){	
				if(measurement != null){
					var _from = $(this).find(":first-child .range-from").val().trim();
					var _to = $(this).find(":first-child .range-to").val().trim();
					var _gender = $(this).find(":first-child .select-dropdown.genders").find(".current").text();
					var _age_from = $(this).find(":first-child .age-range-from").val().trim();
					var _age_to = $(this).find(":first-child .age-range-to").val().trim();
					
					if(_from.length > 0 && _to.length > 0 && _age_from.length > 0 && _age_to.length > 0 && _gender != "Choose..."){			
						measurement.Information.push({
							Index:(index+1),
							From:_from,
							To:_to,
							Gender:_gender,
							AgeFrom:_age_from,
							AgeTo:_age_to
						});
					}
					else measurement = null;
				}				
			});
		}
		else if(_testType == "Alphanumeric Values"){
			measurement.Information = [];
			item.find(".TestItemInfo").children().each(function(index){	
				if(measurement != null){
					var _from = $(this).find(":first-child .from").val().trim();
					var _to = $(this).find(":first-child .to").val().trim();
					
					if(_from.length > 0 && _to.length > 0){	
						measurement.Information.push({
							Index:(index+1),
							From:_from,
							To:_to
						});
					}
					else measurement = null;
				}				
			});
		}
		else if(_testType == "Autocomplete"){
			measurement.Information = [];
			var _list = item.find(":first-child .select-dropdown.autocomplete-list .option").each(function(index){
				var val = $(this).data("value");
				if(val.length > 0){
					measurement.Information.push(val);
				}
			});
			
			if(measurement.Information.length == 0) measurement = null;
		}
		else if(_testType == "Free Text"){
		
		}
	}
	
	return measurement;
}

function getTestID(con, name){
	var id = null;
	var query   = "SELECT ";
		query  += "	`ID` ";
		query  += "FROM `tests` "; 
		query  += "WHERE `Name` = @Name";
	
	var comm = con.createCommand(query);
	if(comm != null){
		comm.addParameter("@Name", "String", name);
		var reader = comm.executeReader();
		if(reader != null){
			if(reader.read()){
				var row = JSON.parse(reader.getValues());	
				if(row != undefined && row != null){
					id = row.ID;
				}
				
			}
			reader.close();
		}
	}
	return id;
}

function getMessagementID(con, testID, name){
	var id = null;
	var query   = "SELECT ";
		query  += "	`ID` ";
		query  += "FROM `measurements` "; 
		query  += "WHERE `TestID` = @TestID ";
		query  += "AND `Name` = @Name";
	
	var comm = con.createCommand(query);
	if(comm != null){
		comm.addParameter("@TestID", "Int32", testID);
		comm.addParameter("@Name", "String", name);
		var reader = comm.executeReader();
		if(reader != null){
			if(reader.read()){
				var row = JSON.parse(reader.getValues());	
				if(row != undefined && row != null){
					id = row.ID;
				}
				
			}
			reader.close();
		}
	}
	return id;
}

function hasDuplicatedNames(){
	var val = false;
	var vals = [];
	
	$(".MeasuresList").find('.TestContainer').each(function(x) {
		if(!val){
			var child = $(this);		
			var measurement = getMeasurement(child.find('.TestMain'));
			
			if(!vals.includes(measurement.Name))vals.push(measurement.Name);
			else val = true;
			
			if(!val){
				var subs = child.find('.TestSub').each(function(y) {
					var subChild = $(this);
					var subMeasurement = getMeasurement(subChild);
					
					if(!vals.includes(subMeasurement.Name))vals.push(subMeasurement.Name);
					else val = true;
				});
			}
		}
	});
	
	return val;
}

function save_test(){
	var _name 					= $(".test-name-input").val().trim();
	var _description 			= $(".description-input").val().trim();
	var _labSection 			= $(".select-dropdown.lab-sections").find(".current").text();
	var _clinicalData 			= $(".clinical-data-input").val().trim();
	var _sectionName 			= $(".section-name-input").val().trim();
	var _panelTests 			= $(".select-dropdown.panel-tests").find(".current").text();
	var _hidePatientName 		= $(".select-dropdown.hide-patient-name").find(".current").text();
	var _prevalenceThreshold 	= $(".prevalence-threshold-input").val().trim();
	var _targetTAT 				= $(".target-tat-input").val().trim();
	var _costToPatient 			= $(".cost-to-patient-input").val().trim();
	
	var _compatibleSpecimens 	= compatibleSpecimens.filter(function(v) { return v.State; }); 
	
	var _totals					= 0;
	var _measurements 			= [];
	$(".MeasuresList").find('.TestContainer').each(function(x) {
		_totals++;
		
		var child = $(this);		
		var measurement = getMeasurement(child.find('.TestMain'));
		if(measurement != null){
			measurement.Subs = [];	
			var hasErrors = false;
			var subs = child.find('.TestSub').each(function(y) {
				var subChild = $(this);
				var subMeasurement = getMeasurement(subChild);
				if(subMeasurement != null)measurement.Subs.push(subMeasurement);
				else hasErrors = true;
			});
			if(!hasErrors)_measurements.push(measurement);
		}
	});
		
	if(_labSection == "--New--") _labSection = _sectionName;
	
	var hasDuplicated = hasDuplicatedNames();
	
	if(_name != undefined && _name != null && _name.trim().length > 0 &&
	   _measurements.length > 0 && _measurements.length == _totals && 
	   _labSection != "Lab Section" && _labSection.length > 0 &&
	   !$(".prevalence-threshold-input").hasClass('is-invalid') &&
	   !$(".target-tat-input").hasClass('is-invalid') &&
	   !$(".cost-to-patient-input").hasClass('is-invalid') && !hasDuplicated){
		
		_name = _name.charAt(0).toUpperCase() + _name.slice(1);
		
		var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","blis_dict.db"),"","");
		if(con != null){
			con.open();
			
			var testID = getTestID(con, _name);
			if(testID == undefined || testID == null){
				var query    = "INSERT INTO `tests` ( ";								
					query   += "`Name` ";
					if(_description.length > 0)query   += ",`Description` ";
					if(_clinicalData.length > 0)query   += ",`ClinicalData` ";
					query   += ",`PanelTest` ";
					query   += ",`HidePatientName` ";
					if(_prevalenceThreshold.length > 0)query   += ",`PrevalenceThreshold` ";
					if(_targetTAT.length > 0)query   += ",`TargetTAT` ";
					if(_costToPatient.length > 0)query   += ",`CostToPatient` ";
					query   += ",`LabSection` ";					
					query   += ") VALUES ( ";
					query   += "@Name ";
					if(_description.length > 0)query   += ",@Description ";
					if(_clinicalData.length > 0)query   += ",@ClinicalData ";
					query   += ",@PanelTest ";
					query   += ",@HidePatientName ";
					if(_prevalenceThreshold.length > 0)query   += ",@PrevalenceThreshold ";
					if(_targetTAT.length > 0)query   += ",@TargetTAT ";
					if(_costToPatient.length > 0)query   += ",@CostToPatient ";
					query   += ",@LabSection ";					
					query   += ")";
					
				var comm = con.createCommand(query);
				if(comm != null){
					comm.addParameter("@Name", "String", _name);
					if(_description.length > 0)comm.addParameter("@Description", "String", _description);
					comm.addParameter("@LabSection", "String", _labSection);
					if(_clinicalData.length > 0)comm.addParameter("@ClinicalData", "String", _clinicalData);
					comm.addParameter("@PanelTest", "Int32", _panelTests == "Yes" ? 1 : 0);
					comm.addParameter("@HidePatientName", "Int32", _hidePatientName == "Yes" ? 1 : 0);
					if(_prevalenceThreshold.length > 0)comm.addParameter("@PrevalenceThreshold", "Int32", _prevalenceThreshold);
					if(_targetTAT.length > 0)comm.addParameter("@TargetTAT", "Double", _targetTAT);
					comm.addParameter("@CostToPatient", "Double", _costToPatient);
				
					comm.executeNonQuery();
				}
				
				testID = getTestID(con, _name);
			}
			
			if(testID != undefined && testID != null){
				//Delete compatible specimens first from db then add new ones
				var query    = "DELETE FROM `compatible_specimens` ";								
					query   += "WHERE `TestID` =@TestID ";
					
				var comm = con.createCommand(query);
				if(comm != null){
					comm.addParameter("@TestID", "Int32", testID);
					comm.executeNonQuery();
				}
					
				_compatibleSpecimens.forEach(function(specimen){
					var query    = "INSERT INTO `compatible_specimens` (`SpecimenTypeID`, `TestID`) ";								
						query   += "VALUES(@SpecimenTypeID, @TestID) ";
						
					var comm = con.createCommand(query);
					if(comm != null){
						comm.addParameter("@SpecimenTypeID", "Int32", specimen.Id);
						comm.addParameter("@TestID", "Int32", testID);
						comm.executeNonQuery();
					}
				});

				//Delete messurements first from db then add new ones
				var query    = "DELETE FROM `measurements` ";								
					query   += "WHERE `TestID` =@TestID ";
					
				var comm = con.createCommand(query);
				if(comm != null){
					comm.addParameter("@TestID", "Int32", testID);
					comm.executeNonQuery();
				}
				
				var query    = "DELETE FROM `measurement_options` ";								
					query   += "WHERE `TestID` =@TestID ";
					
				var comm = con.createCommand(query);
				if(comm != null){
					comm.addParameter("@TestID", "Int32", testID);
					comm.executeNonQuery();
				}
				
				$(".MeasuresList").find('.TestContainer').each(function(x) {					
					var child = $(this);		
					var measurement = getMeasurement(child.find('.TestMain'));
					var messagementID = save_messagement(con, testID, measurement, null);
					
					var subs = child.find('.TestSub').each(function(y) {
						var subChild = $(this);
						var subMeasurement = getMeasurement(subChild);
						var subMessagementID = save_messagement(con, testID, subMeasurement, messagementID);
					});
				});
				
				var content = '';
					content += '<div class="bar-container" style="margin:0px;">';
					content += '	<div class="bar-progress"></div>';
					content += '</div>'; 
					
					content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:48px; margin-bottom:8px; padding:2px 8px;">';						
					content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
					content += '			<h4 class="feature-title mt-0" style="margin:auto auto; font-size: 12px; font-weight:normal; line-height:1;">Test Successfully saved"</h4>';
					content += '		</div>';
					content += '	</div>';
					content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:56px; margin-bottom:8px; padding:2px 8px;">';						
					content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
					content += '			<div class="FlexDisplay" style="margin:auto auto;">';
					content += '				<div class="okButton button button-primary" style="margin:0px 0px 0px 4px;">No</div>';
					content += '			</div>';
					content += '		</div>';
					content += '	</div>';
					content += '</div>';


				var test_dlg = ShowDialog('<i class="mdi mdi-flask-outline"></i>', "Test saved", content,{
					onCloseDialog : function() {
						fac_dlg = null;
						return false; 
					}
				},"400px");	
				
				$(test_dlg.el).find(".okButton").unbind( "click" );
				$(test_dlg.el).find(".okButton").click(function() {
					test_dlg.toggle();
					test_dlg = null;		
				});
				
				load_tests();	
			}			
			con.close();
		}	
	}
	else{
		if(hasDuplicated){
			var content = '';
				content += '<div class="bar-container" style="margin:0px;">';
				content += '	<div class="bar-progress"></div>';
				content += '</div>'; 
				
				content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:48px; margin-bottom:8px; padding:2px 8px;">';						
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<h4 class="feature-title mt-0" style="margin:auto auto; font-size: 12px; font-weight:normal; line-height:1;">Duplicate messurement names exist!"</h4>';
				content += '		</div>';
				content += '	</div>';
				content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:56px; margin-bottom:8px; padding:2px 8px;">';						
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<div class="FlexDisplay" style="margin:auto auto;">';
				content += '				<div class="okButton button button-primary" style="margin:0px 0px 0px 4px;">No</div>';
				content += '			</div>';
				content += '		</div>';
				content += '	</div>';
				content += '</div>';


			var test_dlg = ShowDialog('<i class="mdi mdi-flask-outline"></i>', "Duplicates", content,{
				onCloseDialog : function() {
					fac_dlg = null;
					return false; 
				}
			},"400px");	
			
			$(test_dlg.el).find(".okButton").unbind( "click" );
			$(test_dlg.el).find(".okButton").click(function() {
				test_dlg.toggle();
				test_dlg = null;		
			});
		}
	}
}

function save_messagement(con, testID, measurement, parentID){
	var messagementID = getMessagementID(con, testID, measurement.Name);
	
	if(messagementID == undefined || messagementID == null){
		var query    = "INSERT INTO `measurements` ( ";								
			query   += "`Name` ";
			if(measurement.UnitDefault.length > 0)query   += ",`UnitDefault` ";
			if(parentID != undefined && parentID != null)query   += ",`ParentID` ";
			query   += ",`TestID` ";
			query   += ",`Type` ";							
			query   += ") VALUES ( ";
			query   += "@Name ";
			if(measurement.UnitDefault.length > 0)query   += ",@UnitDefault ";
			if(parentID != undefined && parentID != null)query   += ",@ParentID ";
			query   += ",@TestID ";
			query   += ",@Type ";			
			query   += ")";
		
		var comm = con.createCommand(query);
		if(comm != null){
			comm.addParameter("@Name", "String", measurement.Name);
			if(measurement.UnitDefault.length > 0)comm.addParameter("@UnitDefault", "String", measurement.UnitDefault);
			if(parentID != undefined && parentID != null)comm.addParameter("@ParentID", "Int32", parentID);
			comm.addParameter("@TestID", "Int32", testID);
			comm.addParameter("@Type", "String", measurement.TestType);							
			comm.executeNonQuery();
			
			messagementID = getMessagementID(con, testID, measurement.Name);
		}
	}
	
	if(messagementID != undefined && messagementID != null){
		if(measurement.TestType == "Numeric Range"){
			measurement.Information.forEach(function(m,i){
				save_messagement_settings(con, i+1, testID, messagementID,[
					{ Setting:"From", Value:m.From },
					{ Setting:"To", Value:m.To },
					{ Setting:"Gender", Value:m.Gender },
					{ Setting:"AgeFrom", Value:m.AgeFrom },
					{ Setting:"AgeTo", Value:m.AgeTo }
				]);
			});			
		}
		else if(measurement.TestType == "Alphanumeric Values"){
			measurement.Information.forEach(function(m,i){
				save_messagement_settings(con, i+1, testID, messagementID,[
					{ Setting:"From", Value:m.From },
					{ Setting:"To", Value:m.To }
				]);
			});
		}
		else if(measurement.TestType == "Autocomplete"){
			var _s = [];
			measurement.Information.forEach(function(m,i){
				_s.push({ Setting:"Item"+(i+1), Value:m });
			});
			save_messagement_settings(con, 1, testID, messagementID,_s);
		}
		else if(measurement.TestType == "Free Text"){
			save_messagement_settings(con, 1, testID, messagementID,[]);
		}
	}
	
	 return messagementID;
}

function save_messagement_settings(con, id, testID, messagementID, settings){
	settings.forEach(function(setting, index){
		var query    = "INSERT INTO `measurement_options` (`Index`,`TestID`,`MeasurementID`,`Setting`,`Value`) VALUES ";
			query   += "(@Index"+index+",@TestID"+index+",@MeasurementID"+index+", @Setting"+index+", @Value"+index+")";
		
		var comm = con.createCommand(query);
		if(comm != null){
			comm.addParameter("@Index"+index, "Int32", id);
			comm.addParameter("@TestID"+index, "Int32", testID);
			comm.addParameter("@MeasurementID"+index, "Int32", messagementID);
			comm.addParameter("@Setting"+index, "String", setting.Setting);
			comm.addParameter("@Value"+index, "String", setting.Value);
			comm.executeNonQuery();
		}
	});
}

function view_test(item){
	$('.TestsList').children().each(function(){
		$(this).removeClass('Checked');
	});			
	$(item).addClass('Checked');
	var testID = $(item).data('test-id');
	var testName = $(item).data('test-name');
	
	var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","blis_dict.db"),"","");
	if(con != null){
		con.open();

		var query   = "SELECT ";
			query  += "`ID` ";
			query  += ",`Name` ";
			query  += ",IFNULL(`Description`,'') as `Description` ";
			query  += ",IFNULL(`ClinicalData`,'') as `ClinicalData` ";
			query  += ",`PanelTest` ";
			query  += ",`HidePatientName` ";
			query  += ",IFNULL(`PrevalenceThreshold`,'') as `PrevalenceThreshold` ";
			query  += ",IFNULL(`TargetTAT`,'') as `TargetTAT` ";
			query  += ",IFNULL(`CostToPatient`,'') as `CostToPatient` ";
			query  += ",`LabSection` ";
			query  += "FROM `tests` "; 
			query  += "WHERE `ID` = @ID ";
		
		var comm = con.createCommand(query);
		if(comm != null){
			comm.addParameter("@ID", "Int32", testID);
			var reader = comm.executeReader();
			if(reader != null){
				if(reader.read()){
					var row = JSON.parse(reader.getValues());	
					if(row != undefined && row != null){
						$(".test-name-input").val(row.Name);
						$(".description-input").val(row.Description);
						SelectItemByText($(".select-dropdown.lab-sections"), row.LabSection);
						$(".clinical-data-input").val(row.ClinicalData);
						SelectItemByValue($(".select-dropdown.panel-tests"), row.PanelTest == 0 ? "No" : "Yes");
						SelectItemByValue($(".select-dropdown.hide-patient-name"), row.HidePatientName == 0 ? "No" : "Yes");
						$(".prevalence-threshold-input").val(row.PrevalenceThreshold);
						$(".target-tat-input").val(row.TargetTAT);
						$(".cost-to-patient-input").val(row.CostToPatient);
					}
				}
				reader.close();
				
				var query   = "SELECT ";
					query  += "`ID` ";
					query  += ",`ParentID` ";
					query  += ",`Type` ";
					query  += ",`Name` ";
					query  += ",IFNULL(`UnitDefault`,'') as `UnitDefault` ";
					query  += "FROM `measurements` "; 
					query  += "WHERE `TestID` = @TestID ";
				
				var comm = con.createCommand(query);
				if(comm != null){
					comm.addParameter("@TestID", "Int32", testID);
					var reader = comm.executeReader();
					if(reader != null){
						var messurements = [];
						
						while(reader.read()){
							var row = JSON.parse(reader.getValues());	
							if(row != undefined && row != null){
								row.Information = [];
								row.SubMessurements = [];
								messurements.push(row);
							}
						}
						reader.close();
						
						var query   = "SELECT ";
							query  += "`Index` ";
							query  += ",`TestID` ";
							query  += ",`MeasurementID` ";
							query  += ",`Setting` ";
							query  += ",IFNULL(`Value`,'') as `Value` ";
							query  += "FROM `measurement_options` "; 
							query  += "WHERE `TestID` = @TestID ";
							query  += "ORDER BY `Index`";
							
							var comm = con.createCommand(query);
							if(comm != null){
								comm.addParameter("@TestID", "Int32", testID);
								var reader = comm.executeReader();
								if(reader != null){
									
									while(reader.read()){
										var row = JSON.parse(reader.getValues());	
										if(row != undefined && row != null){
											var messurement = messurements.filter(function(v){ return v.ID == row.MeasurementID; }).shift();
											if(messurement != undefined && messurement != null)messurement.Information.push(row);
										}
									}
									reader.close();
								}
							}
							
							var query   = "SELECT ";
								query   += " `st`.`ID`, ";
								query   += " `st`.`Name`, ";
								query   += " `st`.`Description` ";
								query   += "FROM `compatible_specimens` as `cs` ";
								query   += "INNER JOIN `specimen_types` as `st` ";
								query   += "ON `cs`.`SpecimenTypeID` = `st`.`ID` ";
								query   += "WHERE `cs`.`TestID` = @TestID ";
								
							$(".CompatibleSpecimenList .checkbox").each(function(){
								$(this).prop("checked", false).trigger("change");
							});
							
							
							var comm = con.createCommand(query);
							if(comm != null){
								comm.addParameter("@TestID", "Int32", testID);
								var reader = comm.executeReader();
								if(reader != null){
									while(reader.read()){
										var row = JSON.parse(reader.getValues());	
										if(row != undefined && row != null){
											var specimen = compatibleSpecimens.filter(function(v) { return v.Id == row.ID; }).shift();
											if(specimen != undefined && specimen != null){
												specimen.State = true;
												$('#checkbox_'+row.ID).prop("checked", true).trigger("change");
											}
										}
									}
									reader.close();
								}
							}
							
							messurements.forEach(function(messurement){
								messurement.Information = messurement.Information.reduce(function(obj, { Index, Setting, Value }, index) {
									if(obj[Index-1] == undefined || obj[Index-1] == null)obj[Index-1]=[];									
									obj[Index-1].push({Setting, Value });
									return obj;
								}, []);
								
								if(messurement.Type == "Autocomplete"){
									if(messurement.Information.length > 0){
										messurement.Information = messurement.Information.shift();
									}
								}
								else{
									messurement.Information = messurement.Information.map(function(info) {
										return info.reduce(function(obj, { Setting, Value }, index) {
											obj[Setting] = Value;
											return obj;
										}, {});
									});
								}
								
								//passport size 3 pics per plot (so 3x3)
								//national id
								//sales agreement
							});
							
							
							var subs = messurements.filter(function(v){ return v.ParentID != undefined && v.ParentID != null; });
							messurements = messurements.filter(function(v){ return v.ParentID == undefined || v.ParentID == null; });
							
							subs.forEach(function(sub){
								var messurement = messurements.filter(function(v){ return v.ID == sub.ParentID; }).shift();
								if(messurement != undefined && messurement != null){
									messurement.SubMessurements.push(sub);
								}
							});
							
							$(".MeasuresList").html('');
							messurements.forEach(function(messurement){
								var index = $('.TestContainer').last().find(".TestItem").first().find(".MesurementTitle").text().replace("Measurement ","");
								if(index.length == 0)index = 1;
								else index = parseInt(index)+1;
								
								add_measurement('Measurement '+index, null, messurement);
								
								$('.TestPage').scrollTop($('.TestPage')[0].scrollHeight);
							});
					
					}
				}
				con.close();				
			}
			else con.close();
		}
		else con.close();
	}
}

function load_tests(autoScroll=true){
	$('.TestsList').html('');
	var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","blis_dict.db"),"","");
	if(con != null){
		con.open();

		var query   = "SELECT ";
			query   += "`ID` ";
			query   += ",`Name` ";
			query  += "FROM `tests` "; 
			query  += "ORDER BY `Name` ";
		
		var comm = con.createCommand(query);
		if(comm != null){
			var reader = comm.executeReader();
			if(reader != null){
				while(reader.read()){
					var row = JSON.parse(reader.getValues());	
					if(row != undefined && row != null){
						var index = $('.testindex').last().text();
						if(index.length == 0)index = 1;
						else index = parseInt($('.testindex').last().text())+1;


						var test  = '<div onclick="view_test(this)" data-test-id="'+row.ID+'" data-test-name="'+row.Name+'" class="FlexDisplay FlexRow Divider-Bottom CheckBoxBold" style="min-height:32px;">';
							test += '	<div class="FlexDisplay FlexRow Divider-Right" style="min-height:32px; min-width:40px; max-width:40px;">';
							test += '		<h4 class="testindex feature-title mt-0" style="width:100%; margin:0px 0px 0px 0px; font-size: 12px; font-weight:normal; text-align:center;">'+(index)+'</h4>';
							test += '	</div>';
							test += '	<div class="FlexDisplay Flex FlexRow Divider-Right" style="min-height:32px; min-width:128px;">';
							test += '		<h4 class="feature-title mt-0" style="margin:0px 12px 0px 12px; font-size: 12px; font-weight:normal;">'+row.Name+'</h4>';
							test += '	</div>';
							test += '	<div class="FlexDisplay FlexRow" style="min-height:32px; min-width:24px; font-size:16px; padding:0px 8px;">';
							test += '		<i onclick="delete_test(this)" class="mdi mdi-close-circle" style="margin:auto auto;"/>';
							test += '	</div>';
							test += '</div>';
						
						$('.TestsList').append(test);
						if(autoScroll)$('.TestsList').scrollTop($('.TestsList')[0].scrollHeight);
					}
				}
				reader.close();
				con.close();				
			}
			else con.close();
		}
		else con.close();
	}
}

function delete_test(item){
	var _parent = $(item).parents(".CheckBoxBold");
	if(_parent != undefined && _parent != null){
		var _name = _parent.data("test-name");
		var content = '';
			content += '<div class="bar-container" style="margin:0px;">';
			content += '	<div class="bar-progress"></div>';
			content += '</div>'; 
			
			content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:48px; margin-bottom:8px; padding:2px 8px;">';						
			content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
			content += '			<h4 class="feature-title mt-0" style="margin:auto auto; font-size: 12px; font-weight:normal; line-height:1;">Are you sure you want to delete the test "'+_name+'"?"</h4>';
			content += '		</div>';
			content += '	</div>';
			content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:56px; margin-bottom:8px; padding:2px 8px;">';						
			content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
			content += '			<div class="FlexDisplay" style="margin:auto auto;">';
			content += '				<div class="yesButton button button-primary" style="margin:0px 4px 0px 0px;">Yes</div>';
			content += '				<div class="noButton button button-primary" style="margin:0px 0px 0px 4px;">No</div>';
			content += '			</div>';
			content += '		</div>';
			content += '	</div>';
			content += '</div>';

		var test_dlg = ShowDialog('<i class="mdi mdi-flask-outline"></i>', "Delete test", content,{
			onCloseDialog : function() {
				fac_dlg = null;
				return false; 
			}
		},"400px");	
		
		$(test_dlg.el).find(".noButton").unbind( "click" );
		$(test_dlg.el).find(".noButton").click(function() {
			test_dlg.toggle();
			test_dlg = null;		
		});
		
		$(test_dlg.el).find(".yesButton").unbind( "click" );
		$(test_dlg.el).find(".yesButton").click(function() {
		
			var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","blis_dict.db"),"","");
			if(con != null){
				con.open();
				
				var query    = "DELETE FROM `measurement_options` ";								
					query   += "WHERE `TestID` =@TestID ";
				
				var comm = con.createCommand(query);
				if(comm != null){
					comm.addParameter("@TestID", "Int32", testID);
					comm.executeNonQuery();
					
					var query    = "DELETE FROM `measurements` ";								
						query   += "WHERE `TestID` =@TestID ";
						
					var comm = con.createCommand(query);
					if(comm != null){
						comm.addParameter("@TestID", "Int32", testID);
						comm.executeNonQuery();
						
						var query    = "DELETE FROM `compatible_specimens` ";								
							query   += "WHERE `TestID` =@TestID ";
							
						var comm = con.createCommand(query);
						if(comm != null){
							comm.addParameter("@TestID", "Int32", testID);
							comm.executeNonQuery();
							
							var query    = "DELETE FROM `tests` ";								
								query   += "WHERE `ID` =@TestID ";
								
							var comm = con.createCommand(query);
							if(comm != null){
								comm.addParameter("@TestID", "Int32", testID);
								comm.executeNonQuery();
								
								_parent.remove();
								
								load_tests();
								
								test_dlg.toggle();
								test_dlg = null;							
							}						
						}					
					}				
				}
				con.close();
			}
		});
	}
}

function specimen_checked(item, name){
	var specimen = compatibleSpecimens.filter(function(v) { return v.Name == name; }).shift();
	if(specimen != undefined && specimen != null){
		specimen.State = item.checked;
	}
}

function add_specimen(x,item,isChecked=false, autoScroll=true){

	compatibleSpecimens.push({Id:item.ID, Name:item.Name, State:isChecked});
	
	var _specimen = '';
	_specimen += '<div class="FlexDisplay FlexRow Divider-Bottom" style="min-height:32px; max-height:32px;">';
	_specimen += '	<div class="FlexDisplay Divider-Right" style="min-width:40px; max-width:40px; height:100%; padding:0px 0px 0px 0px;">';
	_specimen += '		<input onchange="specimen_checked(this, \''+item.Name+'\');" type="checkbox" id="checkbox_'+item.ID+'" class="checkbox" '+(isChecked ? "checked" : "")+' style="display: none;">';
	_specimen += '		<label for="checkbox_'+item.ID+'" class="check">';
	_specimen += '		  <svg width="18px" height="18px" viewBox="0 0 18 18">';
	_specimen += '			<path d="M1,9 L1,3.5 C1,2 2,1 3.5,1 L14.5,1 C16,1 17,2 17,3.5 L17,14.5 C17,16 16,17 14.5,17 L3.5,17 C2,17 1,16 1,14.5 L1,9 Z"></path>';
	_specimen += '			<polyline points="1 9 7 14 15 4"></polyline>';
	_specimen += '		  </svg>';
	_specimen += '		</label>';
	_specimen += '	</div>	';						
	_specimen += '	<div class="feature-content Flex FlexGrow" style=" overflow:hidden; margin:-2px 12px 0px 12px;">';
	_specimen += '		<span class="feature-title mt-0" style="font-size:12px; font-weight:normal; white-space:nowrap; width:100%; text-overflow:ellipsis; -webkit-line-clamp:1; color:#6B7A90;">'+item.Name+'</span>';
	_specimen += '	</div>';
	_specimen += '	<div class="feature-content" style="margin:0px 12px 0px 12px;">';
	_specimen += '		<span  tooltip="'+item.Description+'" flow="left" style="font-size:16px; width:24px; color:#6B7A90; '+(item.Description.length > 0 ? 'cursor:pointer;' : '')+' "><i class="mdi mdi-information" /></span>';
	_specimen += '	</div>';
	_specimen += '</div>';
	
	$('.CompatibleSpecimenList').append(_specimen);
	if(autoScroll)$('.CompatibleSpecimenList').scrollTop($('.CompatibleSpecimenList')[0].scrollHeight);

}

function section_selected(item){
	var _labsection = $(".select-dropdown.lab-sections").find(".current").text();
	var _sectionTitle = $(".SectionNameTitle");
	var _sectionInput = $(".SectionNameInput");
	 
	
	if(_labsection == "--New--"){
		_sectionTitle.addClass('FlexDisplay');
		_sectionInput.addClass('FlexDisplay');
	}
	else {
		_sectionTitle.removeClass('FlexDisplay');
		_sectionInput.removeClass('FlexDisplay');
	}
}

function previous(item){
	if(!transitioning && !$(item).hasClass('disable')){
		var section = parseInt($('.animated-sub-page.active').data("path").replace("section-",""));
		var other_section = parseInt($('.animated-sub-page').first().data("path").replace("section-",""));
		if(section>other_section){
			if(section-1 == other_section)$(item).addClass('disable');
			$('.nav-button.next').removeClass('disable');
			proceedTo(item, --section);
		}
	}
}

function next(item){
	if(!transitioning && !$(item).hasClass('disable')){
		var section = parseInt($('.animated-sub-page.active').data("path").replace("section-",""));
		var other_section = parseInt($('.animated-sub-page').last().data("path").replace("section-",""));
		if(section<other_section){
			if(section+1 == other_section)$(item).addClass('disable');
			$('.nav-button.prev').removeClass('disable');			
			proceedTo(item, ++section);
		}
	}
}

function proceedTo(item, index){
	transitioning = true;
	var navigateFrom = $('.animated-sub-page.active');
	var indexFrom = navigateFrom.data("path").replace("section-","");

	if(index != indexFrom){					
		var navigateTo = $("#mainPage").find(`[data-path='section-${index}']`);
		
		navigateTo.one('webkitAnimationEnd oanimationend msAnimationEnd animationend', function(e) {
			transitioning = false;
		});	
		
		navigateFrom.removeClass('transition-busy');
		navigateFrom.removeClass('transition-enter');
		navigateFrom.removeClass('transition-grow');
		navigateFrom.removeClass('transition-shrink');
		navigateFrom.removeClass('transition-enter-right-no-scale');
		navigateFrom.removeClass('transition-enter-left-no-scale');
		if(indexFrom < index) navigateFrom.addClass('transition-leave-left-no-scale');
		else navigateFrom.addClass('transition-leave-right-no-scale');
		  
		navigateTo.removeClass('transition-busy');
		navigateTo.removeClass('transition-enter');
		navigateTo.removeClass('transition-grow');
		navigateTo.removeClass('transition-shrink');
		navigateTo.removeClass('transition-leave-right-no-scale');
		navigateTo.removeClass('transition-leave-left-no-scale');
		if(indexFrom < index) navigateTo.addClass('transition-enter-right-no-scale');
		else navigateTo.addClass('transition-enter-left-no-scale');
		
		navigateFrom.removeClass("active");
		navigateTo.addClass('active');
	}
}

function hideNavigationDropMenu(){
	$(".clear-test .submenu").hide();
	$(".clear-test").attr('id', '');
	$(".save .submenu").hide();
	$(".save").attr('id', '');
}

$("#backBtn").unbind( "click" );
$('#backBtn').click(function(){
	var page = System.IO.Path.Combine("web","blis","views",backNavigation);
	loadSubPage(System.IO.Path.Combine(System.Environment.get_CurrentDirectory(),page), true);
});

$(".select-dropdown.genders").each(function( index ) {
	var _genders = $(this).find(".list");
	if(_genders != undefined && _genders != null){
		_genders.addClass("scroll scroll2");
		_genders.css({"overflow-y": "auto", "max-height": "96px"});
	}
});

function test_type_changed(item){
	var _parent = $(item).parents(".TestItem");
	
	if(_parent != undefined && _parent != null){
		var _test_type =  _parent.find(".select-dropdown.test-type .current").text();
		
		_parent.find('.TestItemInfo').children().not(':first').remove();
		
		var _numericRange = _parent.find(".Measure_NumericRange");
		var _alphanumericValues = _parent.find(".Measure_AlphanumericValues");
		var _autoComplete = _parent.find(".Measure_Autocomplete");
		var _freeText = _parent.find(".Measure_FreeText");
		
		_numericRange.removeClass('FlexDisplay');
		_alphanumericValues.removeClass('FlexDisplay');
		_autoComplete.removeClass('FlexDisplay');
		_freeText.removeClass('FlexDisplay');
		
		if(_test_type == "Numeric Range")_numericRange.addClass('FlexDisplay');
		else if(_test_type == "Alphanumeric Values")_alphanumericValues.addClass('FlexDisplay');
		else if(_test_type == "Autocomplete")_autoComplete.addClass('FlexDisplay');
		else if(_test_type == "Free Text")_freeText.addClass('FlexDisplay');
	}
}

function remove_test(item){
	var _parent = $(item).parents(".TestItem");
	if(_parent != undefined && _parent != null){
		if(!_parent.hasClass('TestSub'))_parent = $(item).parents(".TestContainer");
		else _parent = $(item).parents(".TestSub").parent();
		
		_parent.remove();
	}
}

function add_autocomplete_item(item){
	var _parent = $(item).parents(".Measure_Autocomplete");
	if(_parent != undefined && _parent != null){
		var _autocompleteList  = _parent.find("select.autocomplete-list");
		if(_autocompleteList != undefined && _autocompleteList != null){
		
			var content = '';
				content += '<div class="bar-container" style="margin:0px;">';
				content += '	<div class="bar-progress"></div>';
				content += '</div>';
				
				content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; margin-bottom:8px; padding:2px 8px;">';						
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px; border-radius:2px; ">';	
				content += '				<div class="icon" style="padding-top:0px;">';	
				content += '					<i class="mdi mdi-textbox-password" />';	
				content += '				</div>';	
				content += '				<input type="text" placeholder="Enter value"  class="value-input" style="padding:0px 0px 0px 8px;"/>';	
				content += '				<div class="enter-value icon btn-color Divider-Left scan"  style="border-radius: 0 0px 0px 0; padding:1px 0px 0px 1px; min-width:32px; max-width:32px;">';
				content += '					<i class="mdi mdi-playlist-plus" />';
				content += '				</div>';
				content += '			</div>';
				content += '		</div>';
				content += '	</div>';
				
				
				content += '</div>';


			var acv_dlg = ShowDialog('<i class="mdi mdi-menu-open"></i>', "Auto complete value", content,{
				onCloseDialog : function() {
					acv_dlg = null;
					return false; 
				}
			},"320px");	
			
			$(acv_dlg.el).find(".enter-value").unbind( "click" );
			$(acv_dlg.el).find(".enter-value").click(function() {
				var _value = $(acv_dlg.el).find(".value-input").val().trim();
				if(_value.length > 0){
				
					var _selector = _parent.find(".select-dropdown.autocomplete-list");
					if(_selector != undefined && _selector != null){
						_selector.remove();
				
						_autocompleteList.append('<option value="'+_value+'">'+_value+'</option>');
						
						create_custom_dropdowns();
						
						var _autocompleteListScroll = _parent.find(".select-dropdown.autocomplete-list").find(".list");
						_autocompleteListScroll.addClass("scroll scroll2");
						_autocompleteListScroll.css({"overflow-y": "auto", "max-height": "128px"});	
						
						acv_dlg.toggle();
						acv_dlg = null;
					}
				}
			});
		}
	}
}

function add_sub(item, data){
	var _parent = $(item).parents(".TestContainer");
	if(_parent != undefined && _parent != null){
		var parentIndex = parseInt($(item).parents(".TestItem").find(".MesurementTitle").text().replace("Measurement ",""));
		
		var lastSub = _parent.find(".TestSub").last().find(".MesurementTitle").text().replace("Measurement "+parentIndex+": Sub ","");
		if(lastSub.length == 0)lastSub = 1;
		else lastSub = parseInt(lastSub)+1;
	
		add_measurement('Measurement '+parentIndex+': Sub '+lastSub, _parent);
	}
}

function add_another(item){
	var _parent = $(item).parents(".TestItem");
	if(_parent != undefined && _parent != null){
		var _test_type =  _parent.find(".select-dropdown.test-type .current").text();		
		if(_test_type != "Free Text" && _test_type != "Autocomplete"){
			_parent.find('.TestItemInfo').append(add_testInfo(_test_type, null, true));
			create_custom_dropdowns();
			_parent.scrollTop(_parent[0].scrollHeight);
		}
	}
}

function add_testInfo(item, data, modified){
	var _testInfo = '';
	
	if(data != null){
		var h = 60;
		if(data.Type == "Numeric Range" || data.Type == "Alphanumeric Values"){
			
			data.Information.forEach(function(info, index){
				modified = index > 0;
				if(modified != undefined && modified != null && modified == true){
					h = 46;
				}
				
				_testInfo += '	<div class="FlexDisplay Flex FlexRow" style="padding:4px 16px 8px 16px; min-height:'+h+'px; max-height:'+h+'px;">';
				_testInfo += '		<div class="FlexDisplay Flex FlexRow">';
				
				if(data.Type == "Numeric Range"){
					_testInfo += '			<div class="FlexHidden Flex FlexRow '+(data.Type == "Numeric Range" ? "FlexDisplay" : "")+' Measure_NumericRange">';
					_testInfo += '				<div class="FlexDisplay Flex FlexColumn" style="min-width:180px;">';
					if((modified == undefined || modified == null) || (modified != undefined && modified != null && modified == false)){
						_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
						_testInfo += '						<span style="margin:0px 0px 0px 0px; width:100%;">';
						_testInfo += '							<h4 class="feature-title mt-0" style="text-align:center; font-size: 12px; font-weight:normal; line-height:16px;">Range</h4>';
						_testInfo += '						</span>';
						_testInfo += '					</div>';
					}
					_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
					_testInfo += '							<input onkeypress="return event.charCode >= 48 && event.charCode <= 57" class="range-from" type="text" placeholder="From" value="'+info.From+'" style="text-align:center;"/>';
					_testInfo += '						</div>';
					_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 4px 0px 4px; text-align:center; font-size: 12px; font-weight:normal; line-height:16px; padding-top:8px;">:</h4>';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
					_testInfo += '							<input onkeypress="return event.charCode >= 48 && event.charCode <= 57" class="range-to" type="text" placeholder="To" value="'+info.To+'" style="text-align:center;"/>';
					_testInfo += '						</div>';
					_testInfo += '					</div>';
					_testInfo += '				</div>';
					_testInfo += '				<div class="FlexDisplay Flex FlexColumn" style="min-width:150px;">';
					if((modified == undefined || modified == null) || (modified != undefined && modified != null && modified == false)){
						_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
						_testInfo += '						<span style="margin:0px 0px 0px 0px; width:100%;">';
						_testInfo += '							<h4 class="feature-title mt-0" style="text-align:center; font-size: 12px; font-weight:normal; line-height:16px;">Gender</h4>';
						_testInfo += '						</span>';
						_testInfo += '					</div>';
					}
					_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">';
					_testInfo += '							<div class="icon">';
					_testInfo += '								<i class="mdi mdi-tray-full" />';
					_testInfo += '							</div>';
					_testInfo += '							<select class="genders">';
					_testInfo += '								<option>Choose...</option>';
					_testInfo += '								<option '+(info.Gender == "Ambiguous" ? 'selected=""' : "" )+'>Ambiguous</option>';
					_testInfo += '								<option '+(info.Gender == "Female" ? 'selected=""' : "" )+'>Female</option>';
					_testInfo += '								<option '+(info.Gender == "Male" ? 'selected=""' : "" )+'>Male</option>';
					_testInfo += '								<option '+(info.Gender == "Not applicable" ? 'selected=""' : "" )+'>Not applicable</option>';
					_testInfo += '								<option '+(info.Gender == "Other" ? 'selected=""' : "" )+'>Other</option>';
					_testInfo += '								<option '+(info.Gender == "Unknown" ? 'selected=""' : "" )+'>Unknown</option>';
					_testInfo += '							</select>';
					_testInfo += '						</div>';
					_testInfo += '					</div>';
					_testInfo += '				</div>';
					_testInfo += '				<div class="FlexDisplay Flex FlexColumn"  style="min-width:138px;">';
					if((modified == undefined || modified == null) || (modified != undefined && modified != null && modified == false)){
						_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
						_testInfo += '						<span style="margin:0px 0px 0px 0px; width:100%;">';
						_testInfo += '							<h4 class="feature-title mt-0" style="text-align:center; font-size: 12px; font-weight:normal; line-height:16px;">Age Range</h4>';
						_testInfo += '						</span>';
						_testInfo += '					</div>';
					}
					_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
					_testInfo += '							<input onkeypress="return event.charCode >= 48 && event.charCode <= 57" class="age-range-from" type="text" placeholder="From" value="'+info.AgeFrom+'" style="text-align:center;"/>';
					_testInfo += '						</div>';
					_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 4px 0px 4px; text-align:center; font-size: 12px; font-weight:normal; line-height:16px; padding-top:8px;">:</h4>';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
					_testInfo += '							<input onkeypress="return event.charCode >= 48 && event.charCode <= 57" class="age-range-to" type="text" placeholder="To" value="'+info.AgeFrom+'" style="text-align:center;"/>';
					_testInfo += '						</div>';
					_testInfo += '					</div>';
					_testInfo += '				</div>';
					_testInfo += '			</div>';
				}
				
				if(data.Type == "Alphanumeric Values"){
					_testInfo += '			<div class="FlexHidden Flex FlexRow '+(data.Type == "Alphanumeric Values" ? "FlexDisplay" : "")+' Measure_AlphanumericValues">';												
					_testInfo += '				<div class="FlexDisplay Flex FlexColumn">';
					
					if((modified == undefined || modified == null) || (modified != undefined && modified != null && modified == false)){
						_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
						_testInfo += '						<span style="margin:0px 0px 0px 0px; width:100%;">';
						_testInfo += '							<h4 class="feature-title mt-0" style="text-align:center; font-size: 12px; font-weight:normal; line-height:16px;">Values</h4>';
						_testInfo += '						</span>';
						_testInfo += '					</div>';
					}
					
					_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
					_testInfo += '							<input class="from" type="text" placeholder="" value="'+info.From+'" style="text-align:center;"/>';
					_testInfo += '						</div>';
					_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 4px 0px 4px; text-align:center; font-size: 12px; font-weight:normal; line-height:16px; padding-top:8px;">/</h4>';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
					_testInfo += '							<input class="to" type="text" placeholder="" value="'+info.To+'" style="text-align:center;"/>';
					_testInfo += '						</div>';
					_testInfo += '					</div>';
					_testInfo += '				</div>';
					_testInfo += '			</div>';
				}
				
				_testInfo += '		</div>';
				_testInfo += '	</div>';				
			});
		}
		
		else if(data.Type == "Autocomplete" || data.Type == "Free Text"){
				_testInfo += '	<div class="FlexDisplay Flex FlexRow" style="padding:4px 16px 8px 16px; min-height:'+h+'px; max-height:'+h+'px;">';
				_testInfo += '		<div class="FlexDisplay Flex FlexRow">';
				
				if(data.Type == "Autocomplete"){
					_testInfo += '			<div class="FlexHidden Flex FlexRow '+(data.Type == "Autocomplete" ? "FlexDisplay" : "")+' Measure_Autocomplete">	';											
					_testInfo += '				<div class="FlexDisplay Flex FlexColumn">';
					_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
					_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Values</h4>';
					_testInfo += '					</div>';
					_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
					_testInfo += '							<div class="icon">';
					_testInfo += '								<i class="mdi mdi-textbox-password" />';
					_testInfo += '							</div>';
					_testInfo += '							<select class="autocomplete-list">';
					_testInfo += '								<option selected=""></option>';
					data.Information.forEach(function(info){
						_testInfo += '								<option value="'+info.Value+'">'+info.Value+'</option>';
					});
					_testInfo += '							</select>';
					_testInfo += '						</div>';
					_testInfo += '						<div class="FlexDisplay FlexColumn">';
					_testInfo += '							<div onclick="add_autocomplete_item(this)" class="FlexDisplay btn-clear">';
					_testInfo += '								<div style="margin:auto auto; width:16px height:16px; padding:0px 8px 0px 8px;">';
					_testInfo += '									<i class="mdi mdi-plus-circle" />';
					_testInfo += '								</div>';
					_testInfo += '							</div>';
					_testInfo += '						</div>';
					_testInfo += '					</div>';
					_testInfo += '				</div>	';											
					_testInfo += '			</div>';
				}
				
				if(data.Type == "Free Text"){
					_testInfo += '			<div class="FlexHidden Flex FlexRow '+(data.Type == "Free Text" ? "FlexDisplay" : "")+' Measure_FreeText">	';											
					_testInfo += '				<div class="FlexDisplay Flex FlexColumn">';
					_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
					_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Values</h4>';
					_testInfo += '					</div>';
					_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
					_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
					_testInfo += '							<div class="icon">';
					_testInfo += '								<i class="mdi mdi-help-circle" />';
					_testInfo += '							</div>';
					_testInfo += '							<span style="margin:0px 0px 0px 0px; width:100%;">';
					_testInfo += '								<h4 class="feature-title mt-0" style="font-size: 12px; font-weight:normal; line-height:16px; margin-top:6px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">Will appear as a text box for result entry</h4>';
					_testInfo += '							</span>';
					_testInfo += '						</div>';
					_testInfo += '					</div>';
					_testInfo += '				</div>	';											
					_testInfo += '			</div>';
				}
				
				_testInfo += '		</div>';
				_testInfo += '	</div>';
		}		
	}
	else {
		var h = 60;
		if(item != null && (item == "Numeric Range" || item == "Alphanumeric Values")){
			if(modified != undefined && modified != null && modified == true){
				h = 46;
			}
		}		
		
		_testInfo += '	<div class="FlexDisplay Flex FlexRow" style="padding:4px 16px 8px 16px; min-height:'+h+'px; max-height:'+h+'px;">';
		_testInfo += '		<div class="FlexDisplay Flex FlexRow">';
		
		if((item == undefined || item == null) || (item != null && item == "Numeric Range")){	
			_testInfo += '			<div class="FlexHidden Flex FlexRow '+((item == null && data == null) || (item != null && item == "Numeric Range") ? "FlexDisplay" : "")+' Measure_NumericRange">';
			_testInfo += '				<div class="FlexDisplay Flex FlexColumn" style="min-width:180px;">';
			if((modified == undefined || modified == null) || (modified != undefined && modified != null && modified == false)){
				_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
				_testInfo += '						<span style="margin:0px 0px 0px 0px; width:100%;">';
				_testInfo += '							<h4 class="feature-title mt-0" style="text-align:center; font-size: 12px; font-weight:normal; line-height:16px;">Range</h4>';
				_testInfo += '						</span>';
				_testInfo += '					</div>';
			}
			_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
			_testInfo += '							<input onkeypress="return event.charCode >= 48 && event.charCode <= 57" class="range-from" type="text" placeholder="From" style="text-align:center;"/>';
			_testInfo += '						</div>';
			_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 4px 0px 4px; text-align:center; font-size: 12px; font-weight:normal; line-height:16px; padding-top:8px;">:</h4>';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
			_testInfo += '							<input onkeypress="return event.charCode >= 48 && event.charCode <= 57" class="range-to" type="text" placeholder="To" style="text-align:center;"/>';
			_testInfo += '						</div>';
			_testInfo += '					</div>';
			_testInfo += '				</div>';
			_testInfo += '				<div class="FlexDisplay Flex FlexColumn" style="min-width:150px;">';
			if((modified == undefined || modified == null) || (modified != undefined && modified != null && modified == false)){
				_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
				_testInfo += '						<span style="margin:0px 0px 0px 0px; width:100%;">';
				_testInfo += '							<h4 class="feature-title mt-0" style="text-align:center; font-size: 12px; font-weight:normal; line-height:16px;">Gender</h4>';
				_testInfo += '						</span>';
				_testInfo += '					</div>';
			}
			_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">';
			_testInfo += '							<div class="icon">';
			_testInfo += '								<i class="mdi mdi-tray-full" />';
			_testInfo += '							</div>';
			_testInfo += '							<select class="genders">';
			_testInfo += '								<option selected="">Choose...</option>';
			_testInfo += '								<option>Ambiguous</option>';
			_testInfo += '								<option>Female</option>';
			_testInfo += '								<option>Male</option>';
			_testInfo += '								<option>Not applicable</option>';
			_testInfo += '								<option>Other</option>';
			_testInfo += '								<option>Unknown</option>';
			_testInfo += '							</select>';
			_testInfo += '						</div>';
			_testInfo += '					</div>';
			_testInfo += '				</div>';
			_testInfo += '				<div class="FlexDisplay Flex FlexColumn"  style="min-width:138px;">';
			if((modified == undefined || modified == null) || (modified != undefined && modified != null && modified == false)){
				_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
				_testInfo += '						<span style="margin:0px 0px 0px 0px; width:100%;">';
				_testInfo += '							<h4 class="feature-title mt-0" style="text-align:center; font-size: 12px; font-weight:normal; line-height:16px;">Age Range</h4>';
				_testInfo += '						</span>';
				_testInfo += '					</div>';
			}
			_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
			_testInfo += '							<input onkeypress="return event.charCode >= 48 && event.charCode <= 57" class="age-range-from" type="text" placeholder="From" value="'+(data != undefined && data != null && data.Information != undefined && data.Information != null ? data.Information.AgeFrom : "" )+'" style="text-align:center;"/>';
			_testInfo += '						</div>';
			_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 4px 0px 4px; text-align:center; font-size: 12px; font-weight:normal; line-height:16px; padding-top:8px;">:</h4>';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
			_testInfo += '							<input onkeypress="return event.charCode >= 48 && event.charCode <= 57" class="age-range-to" type="text" placeholder="To" value="'+(data != undefined && data != null && data.Information != undefined && data.Information != null ? data.Information.AgeFrom : "" )+'" style="text-align:center;"/>';
			_testInfo += '						</div>';
			_testInfo += '					</div>';
			_testInfo += '				</div>';
			_testInfo += '			</div>';
		}
		
		if((item == undefined || item == null) || (item != null && item == "Alphanumeric Values")){
			_testInfo += '			<div class="FlexHidden Flex FlexRow '+((item != null && item == "Alphanumeric Values") || (data != null && data.Type == "Alphanumeric Values") ? "FlexDisplay" : "")+' Measure_AlphanumericValues">';												
			_testInfo += '				<div class="FlexDisplay Flex FlexColumn">';
			
			if((modified == undefined || modified == null) || (modified != undefined && modified != null && modified == false)){
				_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
				_testInfo += '						<span style="margin:0px 0px 0px 0px; width:100%;">';
				_testInfo += '							<h4 class="feature-title mt-0" style="text-align:center; font-size: 12px; font-weight:normal; line-height:16px;">Values</h4>';
				_testInfo += '						</span>';
				_testInfo += '					</div>';
			}
			
			_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
			_testInfo += '							<input class="from" type="text" placeholder="" style="text-align:center;"/>';
			_testInfo += '						</div>';
			_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 4px 0px 4px; text-align:center; font-size: 12px; font-weight:normal; line-height:16px; padding-top:8px;">/</h4>';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
			_testInfo += '							<input class="to" type="text" placeholder="" style="text-align:center;"/>';
			_testInfo += '						</div>';
			_testInfo += '					</div>';
			_testInfo += '				</div>';
			_testInfo += '			</div>';
		}
		
		if((item == undefined || item == null) || (item != null && item == "Autocomplete")){
			_testInfo += '			<div class="FlexHidden Flex FlexRow '+((item != null && item == "Autocomplete") ? "FlexDisplay" : "")+' Measure_Autocomplete">	';											
			_testInfo += '				<div class="FlexDisplay Flex FlexColumn">';
			_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
			_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Values</h4>';
			_testInfo += '					</div>';
			_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
			_testInfo += '							<div class="icon">';
			_testInfo += '								<i class="mdi mdi-textbox-password" />';
			_testInfo += '							</div>';
			_testInfo += '							<select class="autocomplete-list">';
			_testInfo += '								<option selected=""></option>';
			_testInfo += '							</select>';
			_testInfo += '						</div>';
			_testInfo += '						<div class="FlexDisplay FlexColumn">';
			_testInfo += '							<div onclick="add_autocomplete_item(this)" class="FlexDisplay btn-clear">';
			_testInfo += '								<div style="margin:auto auto; width:16px height:16px; padding:0px 8px 0px 8px;">';
			_testInfo += '									<i class="mdi mdi-plus-circle" />';
			_testInfo += '								</div>';
			_testInfo += '							</div>';
			_testInfo += '						</div>';
			_testInfo += '					</div>';
			_testInfo += '				</div>	';											
			_testInfo += '			</div>';
		}
		
		if((item == undefined || item == null) || (item != null && item == "Free Text")){
			_testInfo += '			<div class="FlexHidden Flex FlexRow '+((item != null && item == "Free Text") ? "FlexDisplay" : "")+' Measure_FreeText">	';											
			_testInfo += '				<div class="FlexDisplay Flex FlexColumn">';
			_testInfo += '					<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
			_testInfo += '						<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Values</h4>';
			_testInfo += '					</div>';
			_testInfo += '					<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
			_testInfo += '						<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 0px;">';
			_testInfo += '							<div class="icon">';
			_testInfo += '								<i class="mdi mdi-help-circle" />';
			_testInfo += '							</div>';
			_testInfo += '							<span style="margin:0px 0px 0px 0px; width:100%;">';
			_testInfo += '								<h4 class="feature-title mt-0" style="font-size: 12px; font-weight:normal; line-height:16px; margin-top:6px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">Will appear as a text box for result entry</h4>';
			_testInfo += '							</span>';
			_testInfo += '						</div>';
			_testInfo += '					</div>';
			_testInfo += '				</div>	';											
			_testInfo += '			</div>';
		}
		
		_testInfo += '		</div>';
		_testInfo += '	</div>';
		
	}

	return _testInfo;
}

function add_measurement(title, item, data, info, completed){

	var _test = '';
	_test += '	<div class="FlexDisplay Flex FlexColumn TestItem '+(item == null ? "TestMain" : "TestSub")+' Divider-Bottom">';
	
	_test += '		<div class="FlexDisplay FlexRow Divider-Bottom TestTitleBackground" style="height:32px;" >';
	_test += '			<div class="FlexDisplay Flex">';
	_test += '				<h4 class="MesurementTitle feature-title mt-0" style="margin:8px 0px 0px 24px; font-size: 12px; font-weight:normal; line-height:16px;">'+title+'</h4>';
	_test += '			</div>';
	if(item == null){
		_test += '		<div onclick="add_sub(this)" class="FlexDisplay btn-clear" tooltip="Add Sub" flow="down">';
		_test += '			<div style="margin:auto auto; width:16px height:16px; padding:0px 16px 0px 8px;">';
		_test += '				<i class="mdi mdi-plus-circle" />';
		_test += '			</div>';
		_test += '		</div>';
	}
	_test += '		<div onclick="add_another(this)" class="FlexDisplay btn-clear" tooltip="Add another" flow="down">';
	_test += '			<div style="margin:auto auto; width:16px height:16px; padding:0px 16px 0px 8px;">';
	_test += '				<i class="mdi mdi-swap-vertical-circle" />';
	_test += '			</div>';
	_test += '		</div>';
	
	_test += '		<div class="FlexDisplay btn-clear" tooltip="Remove" flow="left" onclick="remove_test(this)">';
	_test += '			<div style="margin:auto auto; width:16px height:16px; padding:0px 16px 0px 8px;">';
	_test += '				<i class="mdi mdi-close-circle" />';
	_test += '			</div>';
	_test += '		</div>';
	
	_test += '		</div>';	
	_test += '		<div class="FlexDisplay Flex FlexRow" style="padding:4px 12px 8px 16px; min-height:60px; max-height:60px;">';
	_test += '			<div class="FlexDisplay Flex FlexColumn" style="min-width:180px;">';
	_test += '				<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
	_test += '					<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Type</h4>';
	_test += '				</div>';
	_test += '				<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
	_test += '					<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">';
	_test += '						<div class="icon">';
	_test += '							<i class="mdi mdi-tray-full" />';
	_test += '						</div>';
	_test += '						<select class="test-type" onchange="test_type_changed(this)">';
	_test += '							<option value="2" '+(data != undefined && data != null && data.Type == "Numeric Range" ? 'selected=""' : (data == undefined || data == null ? 'selected=""' : '' ))+'>Numeric Range</option>';
	_test += '							<option value="1" '+(data != undefined && data != null && data.Type == "Alphanumeric Values" ? 'selected=""' : '')+'>Alphanumeric Values</option>';
	_test += '							<option value="4" '+(data != undefined && data != null && data.Type == "Autocomplete" ? 'selected=""' : '')+'>Autocomplete</option>';
	_test += '							<option value="5" '+(data != undefined && data != null && data.Type == "Free Text" ? 'selected=""' : '')+'>Free Text</option>';
	_test += '						</select>';
	_test += '					</div>';
	_test += '				</div>';
	_test += '			</div>';
	_test += '			<div class="FlexDisplay Flex FlexColumn" style="min-width:150px;">';
	_test += '				<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
	_test += '					<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Name</h4>';
	_test += '				</div>';
	_test += '				<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
	_test += '					<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">';
	_test += '						<div class="icon">';
	_test += '							<i class="mdi mdi-test-tube" />';
	_test += '						</div>';
	_test += '						<input class="measurement-name" type="text" placeholder="Name" value="'+(data != undefined && data != null ? data.Name : '')+'"/>';
	_test += '					</div>';
	_test += '				</div>';
	_test += '			</div>';
	_test += '			<div class="FlexDisplay Flex FlexColumn" style="min-width:138px;">';
	_test += '				<div class="FlexDisplay FlexRow" style="min-height:16px; max-height:16px;" >';
	_test += '					<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Unit/Default Value</h4>';
	_test += '				</div>';
	_test += '				<div class="FlexDisplay FlexRow"  style="width:100%; height:32px;">';
	_test += '					<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">';
	_test += '						<div class="icon">';
	_test += '							<i class="mdi mdi-beaker" />';
	_test += '						</div>';
	_test += '						<input class="measurement-unit-default" type="text" placeholder="Unit/Default Value" value="'+(data != undefined && data != null ? data.UnitDefault : '')+'"/>';
	_test += '					</div>';
	_test += '				</div>';
	_test += '			</div>';
	_test += '		</div>';
	
	_test += '		<div class="FlexDisplay Flex FlexColumn TestItemInfo">';
	_test +=			add_testInfo(null, data);
	_test += '		</div>';
	_test += '	</div>';
	
	
	if(data != undefined && data != null){	
		if(data.SubMessurements.length == 0) {
			completed = true;
		}
		
		if(info == undefined || info == null)info = "";
		info += _test;
		
		data.SubMessurements.forEach(function(messurement, index){
			add_measurement(title+': Sub '+(index+1), "", messurement, _test, index+1 == data.SubMessurements.length);
		});
		
		

		if(completed != undefined && completed != null && completed){
			var _testContainer = '<div class="FlexDisplay Flex FlexColumn TestContainer" style="padding:0px 0px 8px 0px; min-height:160px;">';
			_testContainer += info;
			_testContainer += '</div>';
			$(".MeasuresList").append(_testContainer);
			create_custom_dropdowns();
		}
	}
	else {
		var _testContainer = '<div class="FlexDisplay Flex FlexColumn '+(item == null ? "TestContainer" : "")+'" style="padding:0px 0px 8px 0px; min-height:160px;">';
		_testContainer += _test;
		_testContainer += '</div>';
		
		if(item != undefined && item != null){
			item.append(_testContainer);
			item.scrollTop(item[0].scrollHeight);
		}
		else $(".MeasuresList").append(_testContainer);
		
		create_custom_dropdowns();
	}
	
	return _test;
}

function getLabSections(){
	var _sections = [];
	var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","blis_dict.db"),"","");
	if(con != null){
		con.open();

		var query   = "SELECT ";
			query  += "	`Name` "; 
			query  += "FROM `lab_sections` "; 
			query  += "ORDER BY `Name` ";
		
		var comm = con.createCommand(query);
		if(comm != null){
			var reader = comm.executeReader();
			if(reader != null){
				while(reader.read()){
					var row = JSON.parse(reader.getValues());	
					if(row != undefined && row != null){
						_sections.push(row.Name);
					}
				}
				reader.close();
				con.close();				
			}
			else con.close();
		}
		else con.close();
	}
	_sections.push("--New--");
	return _sections;
}

function getSpecimenTypes(){
	var _specimenTypes = [];
	var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","blis_dict.db"),"","");
	if(con != null){
		con.open();

		var query   = "SELECT ";
			query  += "	`ID` ";
			query  += "	,`Name` ";
			query  += "	,IFNULL(`Description`,'') as `Description` "; 
			query  += "FROM `specimen_types` "; 
			query  += "ORDER BY `Name` ";
		
		var comm = con.createCommand(query);
		if(comm != null){
			var reader = comm.executeReader();
			if(reader != null){
				while(reader.read()){
					var row = JSON.parse(reader.getValues());	
					if(row != undefined && row != null){
						_specimenTypes.push(row);
					}
				}
				reader.close();
				con.close();				
			}
			else con.close();
		}
		else con.close();
	}
	return _specimenTypes;
}


$("#addTests").unbind( "click" );
$("#addTests").click(function() {
	var index = $('.TestContainer').last().find(".TestItem").first().find(".MesurementTitle").text().replace("Measurement ","");
	if(index.length == 0)index = 1;
	else index = parseInt(index)+1;
	
	add_measurement('Measurement '+index, null);
	
	$('.TestPage').scrollTop($('.TestPage')[0].scrollHeight);
});


$(".save").unbind( "click" );
$(".save").click(function(){	
	$(".save .submenu").hide();
	$(".save").attr('id', '');
	save_test();
});

$(".clear-test").unbind( "click" );
$(".clear-test").click(function(){	
	$(".clear-test .submenu").hide();
	$(".clear-test").attr('id', '');
	
	$(".MeasuresList").html('');
	
	$(".CompatibleSpecimenList .checkbox").each(function(){
		$(this).prop("checked", false).trigger("change");
	});
	
	$('.TestsList').children().each(function(){
		$(this).removeClass('Checked');
	});	
	
	$(".test-name-input").val("");
	$(".description-input").val("");
	SelectItemByValue($(".select-dropdown.lab-sections"), "-2");
	$(".clinical-data-input").val('');
	SelectItemByValue($(".select-dropdown.panel-tests"), "No");
	SelectItemByValue($(".select-dropdown.hide-patient-name"), "No");
	$(".prevalence-threshold-input").val("");
	$(".target-tat-input").val("");
	$(".cost-to-patient-input").val("");
	
	
	
});

$(".save").mouseup(function(){
	return false;
});
$(".clear-test").mouseup(function(){
	return false;
});
$(".submenu").mouseup(function(){
	return false;
});

$('.save .submenu .root .nav-button').each(function (index, value) {
	$(this).click(function(){
		
	});
});

$('.clear-test .submenu .root .nav-button').each(function (index, value) {
	$(this).click(function(){
		
	});
});

$(".lab-sections").html('<option value="-2" data-display-text="Lab Section" selected="">Lab Section</option>');
getLabSections().forEach(function(item, index){ 
	$(".lab-sections").append('<option value="'+(item == "--New--" ? -1 : index)+'" data-display-text="'+item+'">'+item+'</option>');
}); 

getSpecimenTypes().forEach(function(item, index){ 
	add_specimen(index, item, false, false); 
}); 


create_custom_dropdowns();
var _labSections = $(".select-dropdown.lab-sections").find(".list");
if(_labSections != undefined && _labSections != null){
	_labSections.addClass("scroll scroll2");
	_labSections.css({"overflow-y": "auto", "max-height": "200px"});
}


focusEvents($('.target-tat-input'),
	function(){
		$(this).parent().removeClass("is-invalid");
	},
	function(){
		var val = $(this).val();
		if(val.trim().length > 0){
			if (!isNaN(val.trim())){
				$(this).parent().removeClass("is-invalid");
			}
			else $(this).parent().addClass("is-invalid");
		}
		else $(this).parent().removeClass("is-invalid");
	}
);

focusEvents($('.prevalence-threshold-input'),
	function(){
		$(this).parent().removeClass("is-invalid");
	},
	function(){
		var val = $(this).val();
		if(val.trim().length > 0){
			if (!isNaN(val.trim())){
				$(this).parent().removeClass("is-invalid");
			}
			else $(this).parent().addClass("is-invalid");
		}
		else $(this).parent().removeClass("is-invalid");
	}
);

focusEvents($('.cost-to-patient-input'),
	function(){
		$(this).parent().removeClass("is-invalid");
	},
	function(){
		var val = $(this).val();
		if(val.trim().length > 0){
			if (!isNaN(val.trim())){
				$(this).parent().removeClass("is-invalid");
			}
			else $(this).parent().addClass("is-invalid");
		}
		else $(this).parent().removeClass("is-invalid");
	}
);

hideNavigationDropMenu();

load_tests();

closeLoadingPage();

//tests.push("testing");
//load_tests();		
</script>