<div class="FlexDisplay FlexColumn container"  style="margin:0px; padding:0px; height:100%;">
	<div class="FlexDisplay" style="background:#535FD7; height:48px; box-shadow:0 1px 2px rgba(0, 0, 0, 0.3);" >
		<div id="backBtn"  class="nav-button" >
			<i class="mdi mdi-apps"></i>
		</div>
		<div class="FlexDisplay">
			<span class="BHIS-Title" style="white-space:nowrap; overflow:hidden; text-overflow: ellipsis; font-weight:normal; font-size:12px; color:#ffffff; margin:auto 8px;">Basic Laboratory Information System</span>
		</div>
		<div class="FlexDisplay FlexGrow" style="height:100%;"></div>
		<div class="search dropdown" tooltip="search" flow="down">
			<div class="nav-button transparent dropdown">
				<i class="mdi mdi-account-search"></i>
			</div>
			<div class="submenu">
				<ul class="root"/>
			</div>
		</div>
		<div class="clear dropdown" tooltip="clear" flow="down">
			<div class="nav-button transparent dropdown">
				<i class="mdi mdi-rotate-left"></i>
			</div>
			<div class="submenu">
				<ul class="root"/>
			</div>
		</div>
		<div class="save dropdown" tooltip="save" flow="down">
			<div class="nav-button transparent dropdown">
				<i class="mdi mdi-check-circle"></i>
			</div>
			<div class="submenu">
				<ul class="root"/>
			</div>
		</div>
	</div>
	<div class="FlexDisplay Flex ContentPage  inner-section FadeIn"  style="width:100%; height:1px;">		
		<div class="FlexDisplay FlexColumn FlexGrow FlexBoxSizing-BorderBox" style="height:100%; overflow: hidden; position:relative;">
			<div class="FlexDisplay" style="margin:16px 16px 0px 16px; height:218px;">
				<div class="page-container FlexDisplay Flex FlexRow Overflow-Hidden inner-container Round Shadow" style="position:relative; height:calc(100% - 0px);  width:100%;">
					<div class="FlexDisplay FlexColumn Divider-Right" style="height:calc(100% - 0px); max-width:412px;min-width:412px;"> 
						<div class="FlexDisplay FlexRow Divider-Bottom" style="min-height:32px; max-height:32px;" >
							<div class="FlexDisplay Flex">
								<h4 class="feature-title mt-0" style="margin:8px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">CONSULTATION</h4>
							</div>
						</div>
						<div class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox" style="width:100%;  height:calc(100% - 12px); z-index:2;">
							<div class="ConsultationPendingList FlexDisplay FlexColumn FlexBoxSizing-BorderBox scroll scroll2" style="overflow-y:auto; height:calc(100% - 20px);">
							</div>
						</div>	
					</div>
					<div class="FlexDisplay FlexGrow FlexColumn" style="height:calc(100% - 0px);">
						<div class="FlexDisplay FlexRow Divider-Bottom" style="min-height:32px; max-height:32px;" >
							<div class="FlexDisplay Flex">
								<h4 class="feature-title mt-0" style="margin:8px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">PATIENT INFORMATION</h4>
							</div>
						</div>
						<div class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox" style="width:100%;  height:calc(100% - 32px); z-index:2;">
							<div class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox scroll scroll2" style="overflow-y:auto; height:calc(100% - 0px);">
								
								<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:8px 0px 0px 0px;" >
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">First Name</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Middle Name</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 4px; font-size: 12px; font-weight:normal; line-height:16px;">Last Name</h4>
									</div>
								</div>
								<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:0px 8px;">						
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px;">
											<div class="icon">
												<i class="mdi mdi-account" />
											</div>
											<input readonly class="FirstName" type="text" placeholder="First Name"/>
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-account" />
											</div>
											<input readonly class="MiddleName" type="text" placeholder="Middle Name"/>
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 0px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-account" />
											</div>
											<input readonly class="LasttName" type="text" placeholder="Last Name"/>
										</div>
									</div>
								</div>
								
								
								<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:8px 0px 0px 0px;" >
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Gender</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Date Of Birth</h4>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 4px; font-size: 12px; font-weight:normal; line-height:16px;">Phone Number</h4>
									</div>
								</div>
								<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:0px 8px;">						
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="Flex btn-group btn-group-toggle gender" data-toggle="buttons" style="margin:0px 4px 0px 0px;">
											<label class="btn btn-color" tooltip="Ambiguous" flow="right">
												<input value="A" type="radio" name="gender_options" autocomplete="off"><div style="width:8px; height:8px; margin:auto auto;">A</div>
											</label>
											<label class="btn btn-color" tooltip="Female" flow="up">
												<input value="F" type="radio" name="gender_options" autocomplete="off"><div style="width:8px; height:8px; margin:auto auto;">F</div>
											</label>
											<label class="btn btn-color" tooltip="Male" flow="up">
												<input value="M" type="radio" name="gender_options" autocomplete="off"><div style="width:8px; height:8px; margin:auto auto;">M</div>
											</label>
											<label class="btn btn-color" tooltip="Not applicable" flow="up">
												<input value="N" type="radio" name="gender_options" autocomplete="off"><div style="width:8px; height:8px; margin:auto auto;">N</div>
											</label>
											<label class="btn btn-color" tooltip="Other" flow="up">
												<input value="O" type="radio" name="gender_options" autocomplete="off"><div style="width:8px; height:8px; margin:auto auto;">O</div>
											</label>
											<label class="btn btn-color" tooltip="Unknown" flow="up">
												<input value="U" type="radio" name="gender_options" autocomplete="off" value=""><div style="width:8px; height:8px; margin:auto auto;">U</div>
											</label>
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-calendar-outline" />
											</div>
											<input readonly class="DateOfBirth" type="text" placeholder="dd/mm/yyyy" class="datepicker-range-dob" style="padding:0px 0px 0px 8px;"/>
											<!--<div id="age-manual" class="icon btn-color Divider-Left"  style="border-radius: 0 4px 4px 0; min-width:32px; max-width:32px;">
												<i class="mdi mdi-calendar-search" />
											</div>-->
										</div>
									</div>
									<div class="FlexDisplay Flex" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-cellphone-basic" />
											</div>
											<input readonly class="PhoneNumber" id="phone_number" type="text" placeholder="Phone Number"/>
										</div>
									</div>
								</div>
								
								<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:8px 0px 0px 0px;" >
									<div class="FlexDisplay Flex FlexGrow-2" style="min-width:260px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Address</h4>
									</div>
									<div class="FlexDisplay Flex FlexGrow" style="min-width:130px;">
										<h4 class="feature-title mt-0" style="margin:0px 0px 0px 4px; font-size: 12px; font-weight:normal; line-height:16px;">Email</h4>
									</div>
								</div>
								<div class="FlexDisplay FlexRow  Divider-Bottom"  style="width:100%; height:56px; padding:0px 8px 16px 8px;">
									<div class="FlexDisplay Flex FlexGrow-2" style="min-width:260px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-earth" />
											</div>
											<input readonly class="Address" type="text" placeholder="Address"/>
										</div>
									</div>
									<div class="FlexDisplay Flex FlexGrow" style="min-width:130px;">
										<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 4px;">
											<div class="icon">
												<i class="mdi mdi-at" />
											</div>
											<input readonly class="EmailAddress" id="email_address" type="text" placeholder="Address"/>
										</div>
									</div>
								</div>
								
							</div>
						</div>			
					</div>			
				</div>
			</div>
			<div class="FlexDisplay Flex FlexGrow" style="margin:16px 16px 16px 16px; height:calc(100% - 328px);">
				<div class="page-container FlexDisplay Flex FlexRow Overflow-Hidden inner-container Round Shadow" style="position:relative; height:calc(100% - 0px);  width:100%;">
					<div class="FlexDisplay FlexGrow FlexColumn Divider-Right" style="height:calc(100% - 0px);">
						<div class="FlexDisplay FlexRow Divider-Bottom" style="min-height:32px; max-height:32px;" >
							<div class="FlexDisplay Flex">
								<h4 class="feature-title mt-0" style="margin:8px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px; white-space: nowrap;">TESTS</h4>
							</div>
							<div tooltip="add test" flow="left" id="addTests" class="FlexHidden btn-clear">
								<div style="margin:auto auto; width:14px height:14px; padding:0px 14px; font-size:14px;"><i class="mdi mdi-flask-plus-outline" /></div>
							</div>
						</div>
						<div class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox" style="width:100%;  height:calc(100% - 32px); z-index:2;">
							<div class="TestsList FlexDisplay FlexColumn FlexBoxSizing-BorderBox scroll scroll2" style="overflow-y:auto; height:calc(100% - 0px);">
							
							</div>
						</div>		
					</div>					
				</div>
			</div>
		</div>
	</div>
</div>
<script>
var Results =[];

$('#backBtn').click(function(){
	var page = System.IO.Path.Combine("web","bhis","views",backNavigation);
	loadSubPage(System.IO.Path.Combine(System.Environment.get_CurrentDirectory(),page), true);
});

function addPendingConsultation(item){
	var index = $('.consultationindex').last().text();
	if(index.length == 0)index = 1;
	else index = parseInt($('.consultationindex').last().text())+1;
	
	var new_consultation = item.RequestID+' : '+item.ConsultedBy;
	
	
	var consultation  = '<div data-id="'+item.RequestID+'" class="FlexDisplay FlexRow Divider-Bottom CheckBoxBold" style="min-height:32px;">';
		consultation += '	<div class="FlexDisplay FlexRow Divider-Right" style="min-height:32px; min-width:40px; max-width:40px;">';
		consultation += '		<h4 class="consultationindex feature-title mt-0" style="width:100%; margin:2px 0px 0px 0px; font-size: 10px; font-weight:normal; text-align:center;">'+(index)+'</h4>';
		consultation += '	</div>';
		consultation += '	<div class="FlexDisplay Flex FlexRow Divider-Right" style="min-height:32px; min-width:128px;">';
		consultation += '		<h4 class="feature-title mt-0" style="margin:0px 12px 0px 12px; font-size: 11px; font-weight:normal;white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">'+new_consultation+'</h4>';
		consultation += '	</div>';
		consultation += '	<div class="FlexDisplay btn-clear" onclick="removePendingConsultation(this,event)">';
		consultation += '		<div style="margin:auto auto; width:16px height:16px; padding:0px 12px; font-size: 14px;"><i class="mdi mdi-close-circle" /></div>';
		consultation += '	</div>';
		consultation += '</div>';
	
	var el = $(consultation);
	$('.ConsultationPendingList').append(el);
	
	el.unbind( "click" );
	el.click(function(){	
		selectPendingConsultation($(this), item);
	});
}

function selectPendingConsultation(el, item){
	$(".ConsultationPendingList .CheckBoxBold").each(function(){
		$(this).removeClass('Checked');
	});

	el.addClass('Checked');
	
	$('.HistoryList').html('');
	$('.TestsList').html('');
	$('.PrescriptionsList').html('');

	$("#addTests").addClass( "FlexDisplay" );
	$("#addTests").unbind( "click" );
	$("#addTests").click(function(){
		addTest(item);
	});
	
	Results =[];
	
	fetchData(item.RequestID);
	fetchTests(item.RequestID, item.ConsultationDateTime);
}

function fetchData(id){
	if(id != undefined && id != null){
		var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_data.db"),"","");
		if(con != null){
			con.open();
			
			var query  = "SELECT ";
				query += "	 `PatientName`";
				query += "	,`PatientMiddleName`";
				query += "	,`PatientLastName`";
				query += "	,`PatientAge`";
				query += "	,`HL7SexCode`";
				query += "	,`PhoneNumber`";
				query += "	,`Address`";
				query += "	,`Email`";
				query += "FROM `Reception` ";
				query += "WHERE (`RequestID` like @ID)";
				query += "LIMIT 1 ";
			
			var comm = con.createCommand(query);
			if(comm != null){
				comm.addParameter("@ID", "String", id);
				
				var reader = comm.executeReader();
				if(reader != null){
					if(reader.read()){
						var row = JSON.parse(reader.getValues());	
						if(row != undefined && row != null){
							$('.FirstName').val(row.PatientName);
							$('.MiddleName').val(row.PatientMiddleName);
							$('.LastName').val(row.PatientLastName);
							
							$('.DateOfBirth').val(row.PatientAge);
							$('.PhoneNumber').val(row.PhoneNumber);
							
							$('.Address').val(row.Address);
							$('.EmailAddress').val(row.Email);
							
							$('.gender').removeClass('is-invalid');
							$('.gender').find("label").each(function(){
								$(this).removeClass('active');
								
								var gender = $(this).find("input").val();
								if(row.HL7SexCode == gender)$(this).addClass('active');
							});
						}
					}
					reader.close();
					con.close();
				}
				else con.close();
			}
			else con.close();
		}
	}
}

function fetchTests(id, dt){
	if(id != undefined && id != null){
		var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_data.db"),"","");
		if(con != null){
			con.open();
			
			var query  = "SELECT ";
				query += " `OBRSetID` ";
				query += " ,`LIMSPanelCode` ";
				query += " ,`LIMSRejectionCode` ";
				query += " ,`LIMSRejectionDesc` ";
				query += " ,`LIMSRejectedBy` ";
				query += "FROM `Request` ";
				query += "WHERE `RequestID` = @ID ";
				query += "AND `ConsultationDateTime` = @DT ";
				
			var comm = con.createCommand(query);
			if(comm != null){
				comm.addParameter("@ID", "String", id);
				comm.addParameter("@DT", "String", dt);
				
				var reader = comm.executeReader();
				if(reader != null){
				
					var conn = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_dict.db"),"","");
					if(conn != null){
						conn.open();
						while(reader.read()){
							var row = JSON.parse(reader.getValues());	
							if(row != undefined && row != null){
								showTests({ 
									ID:row.OBRSetID, 
									Name:row.LIMSPanelCode, 
									RequestID:id, 
									ConsultationDateTime:dt,									
									RejectionCode:row.LIMSRejectionCode,
									RejectionDescription:row.LIMSRejectionDesc,
									RejectedBy:row.LIMSRejectedBy
								}, conn);
							}
						}
						reader.close();						
						conn.close();
					}					
				}
			}
			else con.close();
		}
	}
}

function getRejectionCodes(){
	var codes = [];
	
	codes.push({Reason:'Absence of Humidity Indicators', Code:'HUMID'});
	codes.push({Reason:'Analyzer Hardware Error', Code:'ANAL'});
	codes.push({Reason:'Anatomical Site not Indicated', Code:'IND'});
	codes.push({Reason:'Blood received in wrong tube', Code:'WRONG'});
	codes.push({Reason:'Broken/Leaked in Transit', Code:'LEAK'});
	codes.push({Reason:'CD4 sample older than 48 hours', Code:'OLD48'});
	codes.push({Reason:'Changes made in Parameters', Code:'CM'});
	codes.push({Reason:'Clotted anti coagulated sample', Code:'CLOT'});
	codes.push({Reason:'Clotted detected by Analyzer', Code:'CLOTT'});
	codes.push({Reason:'See Comment', Code:'COMM'});
	codes.push({Reason:'Contaminated Specimen', Code:'CONT'});
	codes.push({Reason:'Dry Specimen', Code:'DRY'});
	codes.push({Reason:'Duplicate Test Order', Code:'DUP'});
	codes.push({Reason:'Empty container received', Code:'EMPT'});
	codes.push({Reason:'Expired Transport Media', Code:'EXP'});
	codes.push({Reason:'FBC Sample older than 4 hours', Code:'OLD4'});
	codes.push({Reason:'Haemolysed Samples', Code:'HAEM'});
	codes.push({Reason:'Humidity colour Change >30%', Code:'COL'});
	codes.push({Reason:'Illegible Specimen ID', Code:'ILLEG'});
	codes.push({Reason:'Improper Packaging', Code:'IMP'});
	codes.push({Reason:'Improper Preservation', Code:'PRES'});
	codes.push({Reason:'Improper Transiport Media', Code:'TRANS'});
	codes.push({Reason:'Inadequately labeled samples', Code:'INLS'});
	codes.push({Reason:'Inappropriate Anatomical Site', Code:'ANAT'});
	codes.push({Reason:'Incorrect Container/Tube', Code:'INCT'});
	codes.push({Reason:'Insufficient Patient Details', Code:'INSF'});
	codes.push({Reason:'Insufficient Sample', Code:'INS'});
	codes.push({Reason:'Laboratory Accident', Code:'ACC'});
	codes.push({Reason:'Lipemic', Code:'LIP'});
	codes.push({Reason:'Mislabelled Specimen', Code:'MISL'});
	codes.push({Reason:'No Request Form Received', Code:'NOR'});
	codes.push({Reason:'NO Sample Received', Code:'NOSR'});
	codes.push({Reason:'Not done. Reagent out of stock', Code:'OS'});
	codes.push({Reason:'Overfilled container', Code:'OVER'});
	codes.push({Reason:'please repeat', Code:'SPUN2'});
	codes.push({Reason:'See Comment', Code:'COM'});
	codes.push({Reason:'Slide Broken Beyond Repair', Code:'SBR'});
	codes.push({Reason:'Slide Smeared on Frosted End', Code:'SSF'});
	codes.push({Reason:'Soiled Containers', Code:'SOIL'});
	codes.push({Reason:'Spec contaminated with urine', Code:'CONU'});
	codes.push({Reason:'Specimen 3 days old on receipt', Code:'DAY3'});
	codes.push({Reason:'Specimen Not Labelled', Code:'SNL'});
	codes.push({Reason:'Specimen older than 6 hours', Code:'OLD6'});
	codes.push({Reason:'specimen unlabelled', Code:'SPUN'});
	codes.push({Reason:'Specimens older than 30 min', Code:'OLD30'});
	codes.push({Reason:'Taken Date not Indicated', Code:'TKN'});
	codes.push({Reason:'Test not performed in this lab', Code:'ND'});
	codes.push({Reason:'There is no test Requested', Code:'REQ'});
	codes.push({Reason:'Too Old Sample/Specimen', Code:'OLD'});
	codes.push({Reason:'Uder filling of tubes', Code:'UFT'});
	codes.push({Reason:'Unacceptable Temperature', Code:'TEMP'});
	codes.push({Reason:'Unknown', Code:'REJMF'});
	codes.push({Reason:'Unpaid Specimen', Code:'UNP'});
	codes.push({Reason:'Unsterile cont for culture', Code:'UNSTC'});
	codes.push({Reason:'Unsuitable for test ordered', Code:'UNS'});
	codes.push({Reason:'Volume Sensor Failure', Code:'VOL'});
	codes.push({Reason:'Was added for Training Purpose', Code:'TRAIN'});
	codes.push({Reason:'Wrong Patient Folder Number', Code:'PATN'});
	codes.push({Reason:'Wrong Patient Name', Code:'PANT'});
	codes.push({Reason:'Wrong Specimen', Code:'WRNG'});
	codes.push({Reason:'Wrong Test Order', Code:'TEST '});
	
	return codes;
}

function rejectTest(item){
	if(!$(item).parents(".TestingItem").hasClass('Rejected')){
		var id = $(item).parents(".TestingItem").data("id");
		var name = $(item).parents(".TestingItem").data("name");
		
		var requestID = $(item).parents(".TestingItem").data("requestid");
		var consultationDateTime = $(item).parents(".TestingItem").data("consultationdatetime");
		
		var content = '';
				content += '<div class="bar-container" style="margin:0px;">';
				content += '	<div class="bar-progress"></div>';
				content += '</div>'; 
				
				content += '	<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:0px 0px 0px 0px;" >';
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Code</h4>';
				content += '		</div>';
				content += '	</div>';
				content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:2px 8px;">';						
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px;">';
				content += '				<div class="icon">';
				content += '					<i class="mdi mdi-test-tube" />';
				content += '				</div>';
				content += '				<select class="rejectionCodes">';
				content += '					<option selected="">...</option>';
				
				getRejectionCodes().forEach(function(element, index){
					content += '					<option value="'+element.Code+'">'+element.Code+' - '+element.Reason+'</option>';
				});
				
				
				content += '				</select>';
				content += '			</div>';
				content += '		</div>';
				content += '	</div>';
				content += '	<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:0px 0px 0px 0px;" >';
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Comment</h4>';
				content += '		</div>';
				content += '	</div>';
				content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:2px 8px;">';						
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px;">';
				content += '				<div class="icon">';
				content += '					<i class="mdi mdi-test-tube" />';
				content += '				</div>';
				content += '				<input type="text" placeholder="Comment"  class="comment-input" style="padding:0px 0px 0px 8px;"/>';	
				content += '			</div>';
				content += '		</div>';
				content += '	</div>';
				
				
				content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:56px; margin-bottom:8px; padding:2px 8px;">';						
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<div class="FlexDisplay" style="margin:auto auto;">';
				content += '				<div class="yesButton button button-primary" style="margin:0px 4px 0px 0px;">Yes</div>';
				content += '				<div class="noButton button button-primary" style="margin:0px 0px 0px 4px;">No</div>';
				content += '			</div>';
				content += '		</div>';
				content += '	</div>';
				content += '</div>';

			var rej_dlg = ShowDialog('<i class="mdi mdi-flask-outline"></i>', "Reject test "+name, content,{
				onCloseDialog : function() {
					fac_dlg = null;
					return false; 
				}
			},"400px");	
			
			create_custom_dropdowns();
			
			var rejectDropDowns = $(rej_dlg.el).find(".select-dropdown.rejectionCodes .list");
			if(rejectDropDowns != undefined && rejectDropDowns != null){
				rejectDropDowns.addClass("scroll scroll2");
				rejectDropDowns.css({"overflow-y": "auto", "max-height": "200px"});
			}
			
			$(rej_dlg.el).find(".noButton").unbind( "click" );
			$(rej_dlg.el).find(".noButton").click(function() {
				rej_dlg.toggle();
				rej_dlg = null;		
			});
			
			$(rej_dlg.el).find(".yesButton").unbind( "click" );
			$(rej_dlg.el).find(".yesButton").click(function() {
				var code = $(rej_dlg.el).find(".rejectionCodes").val();
				var description = $(rej_dlg.el).find(".select-dropdown.rejectionCodes").find(".current").text();
				var comment = $(rej_dlg.el).find(".comment-input").val();
				
				if(!isEmpty(code) && description != "..." && ((code == 'COMM' && !isEmpty(comment)) || code != 'COMM')){	
					//reject in database then display
					
					var desc = description.replace(code+' - ', '');
					
					if(code == 'COMM'){
						description = code+' - '+comment;
						desc = comment;
					}
					
					var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_data.db"),"","");
					if(con != null){
						con.open();
						
						var dt = new Date();
						var dateTimeStamp = `${dt.getFullYear().toString().padStart(4, '0')}-${(dt.getMonth()+1).toString().padStart(2, '0')}-${dt.getDate().toString().padStart(2, '0')}`;
						dateTimeStamp += ` ${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}:${dt.getSeconds().toString().padStart(2, '0')}`;
						var rejectedBy = 'Sys';
						
						var query = "UPDATE `Request` SET";
							query += "	`DateTimeStamp`=@DateTimeStamp";
							query += "	,`Versionstamp`=@Versionstamp";
							query += "	,`LIMSRejectedBy`=@RejectedBy";
							query += "	,`LIMSRejectionCode`=@RejectionCode";
							query += "	,`LIMSRejectionDesc`=@RejectionDescription";
							query += " WHERE `RequestID`=@RequestID";
							query += " AND `ConsultationDateTime`=@ConsultationDateTime";
							query += " AND `OBRSetID`=@ID";
							query += " AND `LIMSRejectionCode`=''";
							
						var comm = con.createCommand(query);
						if(comm != null){
							comm.addParameter("@DateTimeStamp", "String", dateTimeStamp);
							comm.addParameter("@Versionstamp", "String", getVersion().toString());
							comm.addParameter("@RequestID", "String", requestID);
							comm.addParameter("@ID", "Int32", id);
							comm.addParameter("@ConsultationDateTime", "String", consultationDateTime);
							comm.addParameter("@RejectedBy", "String", rejectedBy);
							comm.addParameter("@RejectionCode", "String", code);
							comm.addParameter("@RejectionDescription", "String", desc);
							comm.executeNonQuery();
							con.close();
						}
						else con.close();
					}
							
					$(item).parents(".TestingItem").addClass('Rejected');
					//$(item).remove();
					
					$(item).attr("tooltip",description);
					$(item).html('<div style="margin:auto auto; width:14px height:14px; padding:0px 14px; font-size:14px;"><i class="mdi mdi-information" /></div>');
					
					rej_dlg.toggle();
					rej_dlg = null;	
				}
			});
			
			$(rej_dlg.el).find(".rejectionCodes").change(function() {
				var text = $(this).text();
				if(text != "..."){
					var value = $(this).val();
					//$(rej_dlg.el).find(".comment-input").val(value);
				}
			});
	}
}

function showTests(item, con){
	var testID = item.ID;
	
	var query   = "SELECT ";
		query  += "`ID` ";
		query  += ",`Name` ";
		query  += ",IFNULL(`Description`,'') as `Description` ";
		query  += ",IFNULL(`ClinicalData`,'') as `ClinicalData` ";
		query  += ",`PanelTest` ";
		query  += ",`HidePatientName` ";
		query  += ",IFNULL(`PrevalenceThreshold`,'') as `PrevalenceThreshold` ";
		query  += ",IFNULL(`TargetTAT`,'') as `TargetTAT` ";
		query  += ",IFNULL(`CostToPatient`,'') as `CostToPatient` ";
		query  += ",`LabSection` ";
		query  += "FROM `tests` "; 
		query  += "WHERE `ID` = @ID ";
	
	var currentTest = null;
	var comm = con.createCommand(query);
	if(comm != null){
		comm.addParameter("@ID", "Int32", testID);
		var reader = comm.executeReader();
		if(reader != null){
			if(reader.read()){
				var row = JSON.parse(reader.getValues());	
				if(row != undefined && row != null){
					currentTest = row;
					$(".test-name-input").val(row.Name);
					$(".description-input").val(row.Description);
					SelectItemByText($(".select-dropdown.lab-sections"), row.LabSection);
					$(".clinical-data-input").val(row.ClinicalData);
					SelectItemByValue($(".select-dropdown.panel-tests"), row.PanelTest == 0 ? "No" : "Yes");
					SelectItemByValue($(".select-dropdown.hide-patient-name"), row.HidePatientName == 0 ? "No" : "Yes");
					$(".prevalence-threshold-input").val(row.PrevalenceThreshold);
					$(".target-tat-input").val(row.TargetTAT);
					$(".cost-to-patient-input").val(row.CostToPatient);
				}
			}
			reader.close();
			
			var query   = "SELECT ";
				query  += "`ID` ";
				query  += ",`ParentID` ";
				query  += ",`Type` ";
				query  += ",`Name` ";
				query  += ",IFNULL(`UnitDefault`,'') as `UnitDefault` ";
				query  += "FROM `measurements` "; 
				query  += "WHERE `TestID` = @TestID ";
			
			var comm = con.createCommand(query);
			if(comm != null){
				comm.addParameter("@TestID", "Int32", testID);
				var reader = comm.executeReader();
				if(reader != null){
					var messurements = [];
					
					while(reader.read()){
						var row = JSON.parse(reader.getValues());	
						if(row != undefined && row != null){
							row.Information = [];
							row.SubMessurements = [];
							messurements.push(row);
						}
					}
					reader.close();
					
					var query   = "SELECT ";
						query  += "`Index` ";
						query  += ",`TestID` ";
						query  += ",`MeasurementID` ";
						query  += ",`Setting` ";
						query  += ",IFNULL(`Value`,'') as `Value` ";
						query  += "FROM `measurement_options` "; 
						query  += "WHERE `TestID` = @TestID ";
						query  += "ORDER BY `Index`";
						
					var comm = con.createCommand(query);
					if(comm != null){
						comm.addParameter("@TestID", "Int32", testID);
						var reader = comm.executeReader();
						if(reader != null){
							
							while(reader.read()){
								var row = JSON.parse(reader.getValues());	
								if(row != undefined && row != null){
									var messurement = messurements.filter(function(v){ return v.ID == row.MeasurementID; }).shift();
									if(messurement != undefined && messurement != null)messurement.Information.push(row);
								}
							}
							reader.close();
						}
					}
					
					messurements.forEach(function(messurement){
						messurement.Information = messurement.Information.reduce(function(obj, { Index, Setting, Value }, index) {
							if(obj[Index-1] == undefined || obj[Index-1] == null)obj[Index-1]=[];									
							obj[Index-1].push({Setting, Value });
							return obj;
						}, []);
						
						if(messurement.Type == "Autocomplete"){
							if(messurement.Information.length > 0){
								messurement.Information = messurement.Information.shift();
							}
						}
						else{
							messurement.Information = messurement.Information.map(function(info) {
								return info.reduce(function(obj, { Setting, Value }, index) {
									obj[Setting] = Value;
									return obj;
								}, {});
							});
						}
					});
					
					
					var subs = messurements.filter(function(v){ return v.ParentID != undefined && v.ParentID != null; });
					messurements = messurements.filter(function(v){ return v.ParentID == undefined || v.ParentID == null; });
					
					subs.forEach(function(sub){
						var messurement = messurements.filter(function(v){ return v.ID == sub.ParentID; }).shift();
						if(messurement != undefined && messurement != null){
							messurement.SubMessurements.push(sub);
						}
					});					
					
					var test  = '<div data-rejectioncode="'+item.RejectionCode+'" data-rejectiondescription="'+item.RejectionDescription+'" data-rejectedby="'+item.RejectedBy+'" data-id="'+item.ID+'" data-name="'+item.Name+'" data-requestid="'+item.RequestID+'" data-consultationdatetime="'+item.ConsultationDateTime+'" class="FlexDisplay FlexColumn FlexBoxSizing-BorderBox Divider-Bottom TestingItem '+(!isEmpty(item.RejectionCode) ? 'Rejected' : '')+'" style="width:100%; margin:0px 0px 0px 0px;">';
						test += '	<div class="FlexDisplay FlexRow Title" style="min-height:32px;max-height:32px;margin:0px 0px 0px 0px;" >';
						test += '		<div style="font-size:14px; margin:0px 0px 0px 12px;">';
						test += '			<i class="mdi mdi-flask" style="height:100%; color:white;" />';
						test += '		</div>';
						test += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
						test += '			<h4 class="feature-title mt-0" style="margin:8px 0px 8px 10px; font-size: 12px; font-weight:normal; line-height:16px;">'+item.Name+'</h4>';
						test += '		</div>';
						test += '		<div onclick="rejectTest(this)" tooltip="'+(!isEmpty(item.RejectionCode) ? item.RejectionCode +' - '+item.RejectionDescription : 'reject')+'" flow="left" class="FlexDisplay btn-clear">';
						test += '			<div style="margin:auto auto; width:14px height:14px; padding:0px 14px; font-size:14px;"><i class="mdi mdi-minus-circle" /></div>';
						test += '		</div>';
						test += '	</div>';
						test += '</div>';	
					
					var testEl = $(test);
					
					messurements.forEach(function(messurement, index){
							//var requestID = $(".ConsultationPendingList .CheckBoxBold.Checked").data('id');		
							//var t = Results.filter(function(v){ return v.RequestID == requestID && v.OBRSetID == testID; }).shift();
							//console.log(messurement);
							//console.log(index);
							//console.log(currentTest);
							//console.log(testID);
							if(messurement.Type == "Alphanumeric Values"){
								var paramters  = '	<div class="FlexDisplay FlexRow Testing" style="min-height:44px;max-height:44px;margin:0px 8px 0px 0px;" >';
									paramters += '		<div class="FlexDisplay Divider-Right" style="margin:0px 0px 0px 0px;">';
									paramters += '			<div class="FlexDisplay" style="min-width:256px;max-width:256px;min-height:16px;max-height:16px;margin:16px 0px 0px 0px;">';
									paramters += '				<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">'+messurement.Name+'</h4>';
									paramters += '			</div>';
									paramters += '		</div>';
									paramters += '		<div class="FlexDisplay Flex" style="min-width:150px; margin:8px 0px 4px 8px;">';
									paramters += '			<div class="FlexDisplay Flex FlexRow form-control">';
									paramters += '				<div class="icon" tooltip="'+(messurement.UnitDefault != undefined && messurement.UnitDefault != null && messurement.UnitDefault.trim() != "" ? " "+messurement.UnitDefault.trim() : "" )+'" flow="left">';
									paramters += '					<i class="mdi '+(messurement.UnitDefault != undefined && messurement.UnitDefault != null && messurement.UnitDefault.trim() != "" ? "mdi-information" : "mdi-progress-alert" )+'" />';
									paramters += '				</div>';
									paramters += '				<select class="ResultDropDown">';
									paramters += '					<option selected="">Choose...</option>';
									messurement.Information.forEach(function(information){
										paramters += '<option>'+information.From+'</option>';
										if(information.To != undefined && information.To != null)
											paramters += '<option>'+information.To+'</option>';
									});
									paramters += '				</select>';
									paramters += '			</div>';
									paramters += '		</div>';
									paramters += '	</div>';
								
								var paramtersEl = $(paramters);
								testEl.append(paramtersEl);
								
								paramtersEl.find(".ResultDropDown").unbind( "change" );
								paramtersEl.find(".ResultDropDown").on('change', function (e) {
									//var optionSelected = $("option:selected", this);
									if(isEmpty(item.RejectionCode)){
										updateResult(testID, currentTest.Name, messurement.Name, 'LIMSRptResult', this.value);
										updateResult(testID, currentTest.Name, messurement.Name, 'LIMSRptUnits', messurement.UnitDefault);
										
										updateResult(testID, currentTest.Name, '', 'AnalysisDateTime', receivedEl.find(".datepicker-range-received-in-lab").val());
										updateResult(testID, currentTest.Name, '', 'TestedBy', receivedEl.find(".ResultedBy").val());
									}
								});
							}
							else if(messurement.Type == "Numeric Range"){
								var information = messurement.Information.filter(function(i){ return i.Gender.toLowerCase() == "male"; }).shift();
								if(information != undefined && information != null){
									var paramters  = '	<div class="FlexDisplay FlexRow Testing" style="min-height:44px;max-height:44px;margin:0px 8px 0px 0px;" >';
										paramters += '		<div class="FlexDisplay Divider-Right" style="margin:0px 0px 0px 0px;">';
										paramters += '			<div class="FlexDisplay" style="min-width:256px;max-width:256px;min-height:16px;max-height:16px;margin:16px 0px 0px 0px;">';
										paramters += '				<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">'+item.Name+'</h4>';
										paramters += '			</div>';
										paramters += '		</div>';
										paramters += '		<div class="FlexDisplay Flex" style="min-width:150px; margin:8px 0px 4px 8px;">';
										paramters += '			<div class="FlexDisplay Flex FlexRow form-control">';
										paramters += '				<div class="icon" tooltip="('+information.From+'-'+information.To+')'+(messurement.UnitDefault != undefined && messurement.UnitDefault != null && messurement.UnitDefault.trim() != "" ? " "+messurement.UnitDefault.trim() : "" )+'" flow="left">';
										paramters += '					<i class="mdi mdi-information" />';
										paramters += '				</div>';
										paramters += '				<input class="ResultInput" type="text" placeholder="'+messurement.Name+'"/>';
										paramters += '			</div>';
										paramters += '		</div>';
										paramters += '	</div>';
									
									var paramtersEl = $(paramters);
									testEl.append(paramtersEl);
									
									paramtersEl.find(".ResultInput").unbind( "change" );
									paramtersEl.find(".ResultInput").on('change', function (e) {
										if(isEmpty(item.RejectionCode)){
											updateResult(testID, currentTest.Name, messurement.Name, 'LIMSRptResult', this.value);
											updateResult(testID, currentTest.Name, messurement.Name, 'LIMSRptUnits', messurement.UnitDefault);
											
											updateResult(testID, currentTest.Name, '', 'AnalysisDateTime', receivedEl.find(".datepicker-range-received-in-lab").val());
											updateResult(testID, currentTest.Name, '', 'TestedBy', receivedEl.find(".ResultedBy").val());
										}
									});
								}
							}
							else if(messurement.Type == "Autocomplete"){
								var paramters  = '	<div class="FlexDisplay FlexRow Testing" style="min-height:44px;max-height:44px;margin:0px 8px 0px 0px;" >';
									paramters += '		<div class="FlexDisplay Divider-Right" style="margin:0px 0px 0px 0px;">';
									paramters += '			<div class="FlexDisplay" style="min-width:256px;max-width:256px;min-height:16px;max-height:16px;margin:16px 0px 0px 0px;">';
									paramters += '				<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">'+messurement.Name+'</h4>';
									paramters += '			</div>';
									paramters += '		</div>';
									paramters += '		<div class="FlexDisplay Flex" style="min-width:150px; margin:8px 0px 4px 8px;">';
									paramters += '			<div class="FlexDisplay Flex FlexRow form-control">';
									paramters += '				<div class="icon" tooltip="'+(messurement.UnitDefault != undefined && messurement.UnitDefault != null && messurement.UnitDefault.trim() != "" ? " "+messurement.UnitDefault.trim() : "" )+'" flow="left">';
									paramters += '					<i class="mdi '+(messurement.UnitDefault != undefined && messurement.UnitDefault != null && messurement.UnitDefault.trim() != "" ? "mdi-information" : "mdi-progress-alert" )+'" />';
									paramters += '				</div>';
									paramters += '				<select class="ResultDropDown">';
									paramters += '					<option selected="">Choose...</option>';
									messurement.Information.forEach(function(information){
										paramters += '<option>'+information.Value+'</option>';
									});
									paramters += '				</select>';
									paramters += '			</div>';
									paramters += '		</div>';
									paramters += '	</div>';
									
								var paramtersEl = $(paramters);
								testEl.append(paramtersEl);
								
								paramtersEl.find(".ResultDropDown").unbind( "change" );
								paramtersEl.find(".ResultDropDown").on('change', function (e) {
									if(isEmpty(item.RejectionCode)){
										updateResult(testID, currentTest.Name, messurement.Name, 'LIMSRptResult', this.value);
										updateResult(testID, currentTest.Name, messurement.Name, 'LIMSRptUnits', messurement.UnitDefault);
										
										updateResult(testID, currentTest.Name, '', 'AnalysisDateTime', receivedEl.find(".datepicker-range-received-in-lab").val());
										updateResult(testID, currentTest.Name, '', 'TestedBy', receivedEl.find(".ResultedBy").val());
									}
								});
							}
							else if(messurement.Type == "Free Text"){
								var information = messurement.Information.filter(function(i){ return i.Gender.toLowerCase() == "male"; }).shift();
								if(information != undefined && information != null){
									var paramters  = '	<div class="FlexDisplay FlexRow Testing" style="min-height:44px;max-height:44px;margin:0px 8px 0px 0px;" >';
										paramters += '		<div class="FlexDisplay Divider-Right" style="margin:0px 0px 0px 0px;">';
										paramters += '			<div class="FlexDisplay" style="min-width:256px;max-width:256px;min-height:16px;max-height:16px;margin:16px 0px 0px 0px;">';
										paramters += '				<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">'+item.Name+'</h4>';
										paramters += '			</div>';
										paramters += '		</div>';
										paramters += '		<div class="FlexDisplay Flex" style="min-width:150px; margin:8px 0px 4px 8px;">';
										paramters += '			<div class="FlexDisplay Flex FlexRow form-control">';
										paramters += '				<div class="icon" tooltip="('+(messurement.UnitDefault != undefined && messurement.UnitDefault != null && messurement.UnitDefault.trim() != "" ? " "+messurement.UnitDefault.trim() : "" )+'" flow="left">';
										paramters += '					<i class="mdi '+(messurement.UnitDefault != undefined && messurement.UnitDefault != null && messurement.UnitDefault.trim() != "" ? "mdi-information" : "mdi-progress-alert" )+'" />';
										paramters += '				</div>';
										paramters += '				<input class="ResultInput" type="text" placeholder="'+messurement.Name+'"/>';
										paramters += '			</div>';
										paramters += '		</div>';
										paramters += '	</div>';
										
									var paramtersEl = $(paramters);
									testEl.append(paramtersEl);
									
									paramtersEl.find(".ResultInput").unbind( "change" );
									paramtersEl.find(".ResultInput").on('change', function (e) {
										if(isEmpty(item.RejectionCode)){
											updateResult(testID, currentTest.Name, messurement.Name, 'LIMSRptResult', this.value);
											updateResult(testID, currentTest.Name, messurement.Name, 'LIMSRptUnits', messurement.UnitDefault);
											
											updateResult(testID, currentTest.Name, '', 'AnalysisDateTime', receivedEl.find(".datepicker-range-received-in-lab").val());
											updateResult(testID, currentTest.Name, '', 'TestedBy', receivedEl.find(".ResultedBy").val());
										}
									});
								}
							}
					});
					
					var result = '	<div class="FlexDisplay FlexRow Testing" style="min-height:44px;max-height:44px;margin:0px 8px 0px 0px;" >';
						result += '		<div class="FlexDisplay Divider-Right" style="margin:0px 0px 0px 0px;">';
						result += '			<div class="FlexDisplay" style="min-width:256px;max-width:256px;min-height:16px;max-height:16px;margin:16px 0px 0px 0px;">';
						result += '				<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Result:</h4>';
						result += '			</div>';
						result += '		</div>';
						result += '		<div class="FlexDisplay Flex" style="min-width:150px; margin:8px 0px 4px 8px;">';
						result += '			<div class="FlexDisplay Flex FlexRow form-control">';
						result += '				<div class="icon">';
						result += '					<i class="mdi mdi-flask" />';
						result += '				</div>';
						result += '				<input class="ResultInterpretationInput" type="text" placeholder="Interpretation"/>';
						result += '			</div>';
						result += '		</div>';
						result += '		<div class="FlexDisplay Flex" style="min-width:150px; margin:8px 0px 4px 8px;">';
						result += '			<div class="FlexDisplay Flex FlexRow form-control">';
						result += '				<div class="icon">';
						result += '					<i class="mdi mdi-flask" />';
						result += '				</div>';
						result += '				<input class="ResultRemarksInput" type="text" placeholder="Remarks (Optional)"/>';
						result += '			</div>';
						result += '		</div>';
						result += '	</div>';
					var resultEl = $(result);
					
					resultEl.find(".ResultInterpretationInput").unbind( "change" );
					resultEl.find(".ResultInterpretationInput").on('change', function (e) {
						if(isEmpty(item.RejectionCode)){
							updateResult(testID, currentTest.Name, 'Interpretation', 'LIMSRptResult', this.value);
							updateResult(testID, currentTest.Name, '', 'AnalysisDateTime', receivedEl.find(".datepicker-range-received-in-lab").val());
							updateResult(testID, currentTest.Name, '', 'TestedBy', receivedEl.find(".ResultedBy").val());
						}
					});
					
					resultEl.find(".ResultRemarksInput").unbind( "change" );
					resultEl.find(".ResultRemarksInput").on('change', function (e) {
						if(isEmpty(item.RejectionCode)){
							updateResult(testID, currentTest.Name, 'Remarks', 'LIMSRptResult', this.value);
							updateResult(testID, currentTest.Name, '', 'AnalysisDateTime', receivedEl.find(".datepicker-range-received-in-lab").val());
							updateResult(testID, currentTest.Name, '', 'TestedBy', receivedEl.find(".ResultedBy").val());
						}
					});
					
					var received  = '	<div class="FlexDisplay FlexRow Testing" style="min-height:44px;max-height:44px;margin:0px 8px 0px 0px;" >';
						received += '		<div class="FlexDisplay Divider-Right" style="margin:0px 0px 0px 0px;">';
						received += '			<div class="FlexDisplay" style="min-width:256px;max-width:256px;min-height:16px;max-height:16px;margin:16px 0px 0px 0px;">';
						received += '				<h4 class="feature-title mt-0" style="margin:0px 0px 0px 10px; font-size: 12px; font-weight:normal; line-height:16px;">Received In Lab:</h4>';
						received += '			</div>';
						received += '		</div>';
						received += '		<div class="FlexDisplay Flex" style="min-width:150px; margin:8px 0px 4px 8px;">';
						received += '			<div class="FlexDisplay Flex FlexRow form-control">';
						received += '				<div class="icon">';
						received += '					<i class="mdi mdi-calendar-outline" />';
						received += '				</div>';
						received += '				<input type="text" placeholder="dd/mm/yyyy hh:mm" class="datepicker-range-received-in-lab" style="padding:0px 0px 0px 8px;"/>';
						received += '			</div>';
						received += '		</div>';
						received += '		<div class="FlexDisplay Flex" style="min-width:150px; margin:8px 0px 4px 8px;">';
						received += '			<div class="FlexDisplay Flex FlexRow form-control">';
						received += '				<div class="icon">';
						received += '					<i class="mdi mdi-doctor" />';
						received += '				</div>';
						received += '				<input class="ResultedBy" type="text" placeholder="By"/>';
						received += '			</div>';
						received += '		</div>';
						received += '	</div>';
					var receivedEl = $(received);
					
					
					var received_in_lab_datepicker = InitDatePicker(receivedEl.find(".datepicker-range-received-in-lab"), {
						language: 'en',
						dateFormat: 'dd/mm/yyyy',
						timepicker: true, 
						timeFormat: 'hh:ii', 
						position: "top left",
						maxDate:new Date(),
						//startDate:new Date(),
						onShow:function(inst, animationCompleted){
							if(animationCompleted)inst.update('maxDate', new Date());
						},
						onSelect:function(formattedDate, date, inst){
							if(isEmpty(item.RejectionCode))updateResult(testID, currentTest.Name, '', 'AnalysisDateTime', formattedDate);
						}
					});
					received_in_lab_datepicker.selectDate(new Date());
					
					receivedEl.find(".ResultedBy").unbind( "change" );
					receivedEl.find(".ResultedBy").on('change', function (e) {
						if(isEmpty(item.RejectionCode))updateResult(testID, currentTest.Name, '', 'TestedBy', this.value);
					});
					
					var spacer  = '	<div class="FlexDisplay FlexRow" style="min-height:8px;max-height:8px;" >';
						spacer += '		<div class="FlexDisplay Divider-Right" style="min-width:257px;max-width:257px;"></div>';
						spacer += '	</div>';
					var spacerEl = $(spacer);
					
					testEl.append(resultEl);
					testEl.append(receivedEl);
					testEl.append(spacerEl);
					
					$('.TestsList').append(testEl);	
					
					create_custom_dropdowns();
					
					var resultDropDowns = $(".TestsList .select-dropdown.ResultDropDown").find(".list");
					if(resultDropDowns != undefined && resultDropDowns != null){
						resultDropDowns.addClass("scroll scroll2");
						resultDropDowns.css({"overflow-y": "auto", "max-height": "200px"});
					}
					
				}
			}				
		}
	}
	
}

function updateResult(testID, code, description, key, value){
//console.log(currentTest);
	if(!isEmpty(value)){
		var requestID = $(".ConsultationPendingList .CheckBoxBold.Checked").data('id');		
		if(!isEmpty(description)){
			var t = Results.filter(function(v){ return v.RequestID == requestID && v.OBRSetID == testID && v.LIMSObservationDesc == description; }).shift();
			if(t == undefined && t == null){
				t = {
					//DateTimeStamp
					Versionstamp:getVersion().toString(),
					RequestID:requestID,
					OBRSetID:testID,
					OBXSetID:1,
					LIMSObservationCode:code,
					LIMSObservationDesc:description,
					LIMSRptResult:(!isEmpty(key) && key.toLowerCase() == 'limsrptresult' ? value : null),
					LIMSRptUnits:(!isEmpty(key) && key.toLowerCase() == 'limsrptunits' ? value : null),
					AnalysisDateTime:(!isEmpty(key) && key.toLowerCase() == 'analysisdatetime' ? value : null),
					TestedBy:(!isEmpty(key) && key.toLowerCase() == 'testedby' ? value : null)
				};
				Results.push(t);
				
				t.OBXSetID = Results.filter(function(v){ return v.RequestID == requestID && v.OBRSetID == testID }).length;
			}
			else {
				t.Versionstamp = getVersion().toString();
				t.LIMSRptResult = (!isEmpty(key) && key.toLowerCase() == 'limsrptresult' ? value : t.LIMSRptResult);
				t.LIMSRptUnits = (!isEmpty(key) && key.toLowerCase() == 'limsrptunits' ? value : t.LIMSRptUnits);
				t.AnalysisDateTime = (!isEmpty(key) && key.toLowerCase() == 'analysisdatetime' ? value : t.AnalysisDateTime);
				t.TestedBy = (!isEmpty(key) && key.toLowerCase() == 'testedby' ? value : t.TestedBy);
			}
		}
		else{
			var ts = Results.filter(function(v){ return v.RequestID == requestID && v.OBRSetID == testID });
			ts.forEach(function(t){
				t.Versionstamp = getVersion().toString();
				t.LIMSRptResult = (!isEmpty(key) && key.toLowerCase() == 'limsrptresult' ? value : t.LIMSRptResult);
				t.LIMSRptUnits = (!isEmpty(key) && key.toLowerCase() == 'limsrptunits' ? value : t.LIMSRptUnits);
				t.AnalysisDateTime = (!isEmpty(key) && key.toLowerCase() == 'analysisdatetime' ? value : t.AnalysisDateTime);
				t.AuthorisedDateTime = (!isEmpty(key) && key.toLowerCase() == 'authoriseddatetime' ? value : t.AuthorisedDateTime);
				t.TestedBy = (!isEmpty(key) && key.toLowerCase() == 'testedby' ? value : t.TestedBy);
				t.AuthorisedBy = (!isEmpty(key) && key.toLowerCase() == 'authorisedby' ? value : t.AuthorisedBy);
			});
		}
	}
}

function getSamplesTypes(){
	var samplesTypes = [];
	var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_dict.db"),"","");
	if(con != null){
		con.open();

		var query  = "SELECT ";
			query += "	`ID` ";
			query += "	, `Name` ";
			query += "	, `Description` ";
			query += "FROM `specimen_types` ";
				
		var comm = con.createCommand(query);
		if(comm != null){
			var reader = comm.executeReader();
			if(reader != null){
				while(reader.read()){
					var row = JSON.parse(reader.getValues());	
					if(row != undefined && row != null){
						samplesTypes.push(row);
					}
				}
				reader.close();
				con.close();				
			}
			else con.close();
		}
		else con.close();
	}
	
	return samplesTypes;
}

function getTests(id){
	var tests = [];
	var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_dict.db"),"","");
	if(con != null){
		con.open();

		var query  = "select  ";
			query  += "	`te`.`ID` ";
			query  += "	,`te`.`Name` ";
			query  += "	,`te`.`Description` ";
			query  += "	,`te`.`LabSection` ";
			query  += "	,IFNULL(`te`.`CostToPatient`,0) `CostToPatient` ";
			query  += "from `compatible_specimens` `co` ";
			query  += "inner join `tests` `te` ";
			query  += "on `co`.`TestID` = `te`.`ID` ";
			query  += "where `co`.`SpecimenTypeID` = @ID ";
				
		var comm = con.createCommand(query);
		if(comm != null){
			comm.addParameter("@ID", "Int32", id);
			var reader = comm.executeReader();
			if(reader != null){
				while(reader.read()){
					var row = JSON.parse(reader.getValues());	
					if(row != undefined && row != null){
						tests.push(row);
					}
				}
				reader.close();
				con.close();				
			}
			else con.close();
		}
		else con.close();
	}
	
	return tests;
}

$('input[type=radio][name=gender_options]').change(function() {
	$(this).parents(".btn-group-toggle").find(".active").removeClass('active');
	$(this).parent().addClass('active');
});

$('input[type=radio][name=gender_options]:not(:checked)').attr('disabled', true);

$(".search").unbind( "click" );
$(".search").click(function(){
	$(".save .submenu").hide();
	$(".save").attr('id', '');
	
	$(".clear .submenu").hide();
	$(".clear").attr('id', '');
	
	if(!$(".search").hasClass("Disabled")){
		$(".search").addClass("Disabled");
		
		Instascan.Camera.getCameras().then(function (cameras) {
			var content = '';
				content += '<div class="bar-container" style="margin:0px;">';
				content += '	<div class="bar-progress"></div>';
				content += '</div>';
				
				if (cameras.length > 0){
					content += '<div class="FlexDisplay FlexColumn" style="width:100%; min-height:320px;  margin:8px 0px 4px 0px;" >';
					content += '	<div class="FlexDisplay Flex FlexRow Divider-Bottom"  style="width:100%; position:relative; padding:2px 8px;">';
					content += '		<video class="camera_preview" style="background:black; object-fit: cover; min-width:305px; max-width:305px; min-height:270px; max-height:270px"></video>';
					content += '		<div class="preloader-scan">';
					content += '			<div class="diode">';
					content += '				<div class="laser"></div>';
					content += '			</div>';
					content += '		</div>';
					content += '	</div>';

					content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:2px 8px;">';						
					content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
					content += '			<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px; border-radius:2px; ">';
					content += '				<div class="icon">';
					content += '					<i class="mdi mdi-camera" />';
					content += '				</div>';
					content += '				<select class="cameras" onchange="camera_selected(this)">';
					cameras.forEach(function(element, index){
						if(index == 0)content += '					<option value="'+element.id+'" selected="">'+element.name+'</option>';
						else 		  content += '					<option value="'+element.id+'">'+element.name+'</option>';
					});
					content += '				</select>';
					content += '			</div>';
					content += '		</div>';
					content += '	</div>';
				}
				
				content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; margin-top:8px; margin-bottom:8px; padding:2px 8px;">';						
				content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
				content += '			<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px; border-radius:2px; ">';	
				content += '				<div class="icon" style="padding-top:0px;">';	
				content += '					<i class="mdi mdi-badge-account-outline" />';	
				content += '				</div>';	
				content += '				<input type="text" placeholder="Name or ID" class="name-id" style="padding:0px 0px 0px 8px;"/>';	
				content += '				<div class="icon btn-color Divider-Left scan"  style="border-radius: 0 0px 0px 0; padding:1px 0px 0px 1px; min-width:32px; max-width:32px;">';
				content += '					<i class="mdi mdi-magnify-scan" />';
				content += '				</div>';
				content += '			</div>';
				content += '		</div>';
				content += '	</div>';
				content += '</div>';
			
			
			var search_dlg = ShowDialog('<i class="mdi mdi-account-group"></i>', "Search", content,{
				onCloseDialog : function() {
					if(scanner != null){
						scanner.stop();
						scanner = null;
						search_dlg = null;
					}
					$(".search").removeClass("Disabled");
					return false; 
				}
			},"320px");	
			
			if (cameras.length > 0){
				scanner = new Instascan.Scanner({
					continuous: true,
					video: $(search_dlg.el).find(".camera_preview").get(0),
					mirror: true,
					captureImage: false,
					backgroundScan: true,
					refractoryPeriod: 5000,
					scanPeriod: 1
				});
				scanner.addListener('scan', function (content) {
					if(content != undefined && content != null){
						
						
						scanner.stop();
						search_dlg.toggle();		
						scanner = null;
						search_dlg = null;
					}		
				});
				
				create_custom_dropdowns();
				scanner.start(cameras[0]);
			}

			$(search_dlg.el).find(".scan").unbind( "click" );
			$(search_dlg.el).find(".scan").click(function() {
				//var result = scanner.scan();
				//console.log(result);
				//console.log(result.content);
				//console.log(result.image);
			});		
		})
		.catch(function (e) {
			console.error(e);
		});
	}
});

function clearData(){
	$(".ConsultationPendingList .CheckBoxBold").each(function(){
		$(this).removeClass('Checked');
	});
	
	$('.TestsList').html('');
	
	$('.FirstName').val('');
	$('.MiddleName').val('');
	$('.LastName').val('');
	
	$('.DateOfBirth').val('');
	$('.PhoneNumber').val('');
	
	$('.Address').val('');
	$('.EmailAddress').val('');
	
	$('.gender').find("label").each(function(){
		$(this).removeClass('active');
	});
	
	$("#addTests").removeClass( "FlexDisplay" );	
	$("#addTests").unbind( "click" );
	
	Results =[];
}

function hideNavigationDropMenu(){
	$(".search .submenu").hide();
	$(".search").attr('id', '');
	$(".clear .submenu").hide();
	$(".clear").attr('id', '');
	$(".save .submenu").hide();
	$(".save").attr('id', '');
}

function addTest(item){
	var content = '';
			content += '<div class="bar-container" style="margin:0px;">';
			content += '	<div class="bar-progress"></div>';
			content += '</div>';
			content += '<div class="FlexDisplay FlexColumn" style="width:100%; min-height:128px;  margin:8px 0px 4px 0px;" >';
			
			
			content += '	<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:0px 0px 0px 0px;" >';
			content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
			content += '			<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Specimen Type</h4>';
			content += '		</div>';
			content += '	</div>';
			content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:2px 8px;">';						
			content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
			content += '			<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px;">';
			content += '				<div class="icon">';
			content += '					<i class="mdi mdi-test-tube" />';
			content += '				</div>';
			content += '				<select class="specimenTypes">';
			content += '					<option selected="">...</option>';
			content += '				</select>';
			content += '			</div>';
			content += '		</div>';
			content += '	</div>';
			
			content += '	<div class="FlexDisplay FlexRow" style="min-height:16px;max-height:16px;margin:8px 0px 0px 0px;" >';
			content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
			content += '			<h4 class="feature-title mt-0" style="margin:0px 0px 0px 12px; font-size: 12px; font-weight:normal; line-height:16px;">Tests</h4>';
			content += '		</div>';
			content += '	</div>';
			content += '	<div class="FlexDisplay FlexRow"  style="width:100%; height:32px; padding:2px 8px;">';						
			content += '		<div class="FlexDisplay Flex" style="min-width:150px;">';
			content += '			<div class="FlexDisplay Flex FlexRow form-control" style="margin:0px 4px 0px 0px;">';
			content += '				<div class="icon">';
			content += '					<i class="mdi mdi-flask" />';
			content += '				</div>';
			content += '				<select class="tests">';
			content += '					<option selected="">...</option>';
			content += '				</select>';
			content += '			</div>';
			content += '		</div>';
			content += '	</div>';
			
			content += '</div>';
			content += '<div class="FlexDisplay FlexRow" style="width:100%; height:auto; margin:4px 0px 8px 0px;" >';
			content += '	<div class="FlexDisplay Flex"></div>';
			content += '	<div class="FlexDisplay FlexRow" style="margin:8px 12px; height:auto;" >';
			content += '			<div class="addTestButton button button-primary" style="margin:0px;">ADD</div>';
			content += '	</div>';
			content += '</div>';
	
	var dlg = ShowDialog('<i class="mdi mdi-flask-plus-outline"></i>', "Add Tests", content);				
	$(dlg.el).find(".addTestButton").unbind( "click" );
	$(dlg.el).find(".addTestButton").click(function() {
		var testname = $(dlg.el).find("select.tests").val();
		if(testname != "..."){
			var id = $(dlg.el).find("select.tests").val();
			var test = tests.filter(function(v){ return v.ID == id;}).shift();
			if(test != undefined && test != null){
				
				test.RequestID = item.RequestID;
				test.ConsultationDateTime = item.ConsultationDateTime;				
				test.RejectionCode = '';
				test.RejectionDescription = '';
				test.RejectedBy = '';
				
				var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_data.db"),"","");
				if(con != null){
					con.open();
					
					var requestID = test.RequestID;
					var consultationDateTime = test.ConsultationDateTime;
					
					var id = test.ID;
					var name = test.Name;
					var description = test.Description;
					var labsection = test.LabSection;
					var price = parseFloat(test.CostToPatient);
					
					var dt = new Date();
					var dateTimeStamp = `${dt.getFullYear().toString().padStart(4, '0')}-${(dt.getMonth()+1).toString().padStart(2, '0')}-${dt.getDate().toString().padStart(2, '0')}`;
					dateTimeStamp += ` ${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}:${dt.getSeconds().toString().padStart(2, '0')}`;
					var consultedBy = 'Sys';
					
					var query = "INSERT INTO `Request`(";
						query += "	`DateTimeStamp`";
						query += "	,`Versionstamp`";
						query += "	,`RequestID`";
						query += "	,`ConsultationDateTime`";
						query += "	,`OBRSetID`";
						query += "	,`LIMSPanelCode`";
						if(!isEmpty(description))query += "	,`LIMSPanelDesc`";
						query += "	,`RegisteredDateTime`";
						query += "	,`CostUnits`";
						query += "	,`HL7SectionCode`";
						query += "	,`LIMSRejectionCode`";
						query += "	,`LIMSRejectionDesc`";
						query += "	,`LIMSRejectedBy`";
						query += ") VALUES (";
						query += "	 @DateTimeStamp";
						query += "	,@Versionstamp";
						query += "	,@RequestID";
						query += "	,@ConsultationDateTime";
						query += "	,@OBRSetID";
						query += "	,@LIMSPanelCode";
						if(!isEmpty(description))query += "	,@LIMSPanelDesc";
						query += "	,@RegisteredDateTime";
						query += "	,@CostUnits";
						query += "	,@HL7SectionCode"
						query += "	,@LIMSRejectionCode";
						query += "	,@LIMSRejectionDesc";
						query += "	,@LIMSRejectedBy";
						query += ")";
						
					var comm = con.createCommand(query);
					if(comm != null){
						comm.addParameter("@DateTimeStamp", "String", dateTimeStamp);
						comm.addParameter("@Versionstamp", "String", getVersion().toString());
						comm.addParameter("@RequestID", "String", requestID);
						comm.addParameter("@ConsultationDateTime", "String", consultationDateTime);
						comm.addParameter("@OBRSetID", "Int32", id);
						comm.addParameter("@LIMSPanelCode", "String", name);
						if(!isEmpty(description))comm.addParameter("@LIMSPanelDesc", "String", description);
						comm.addParameter("@RegisteredDateTime", "String", dateTimeStamp);
						comm.addParameter("@CostUnits", "Double", price);
						comm.addParameter("@HL7SectionCode", "String", labsection);
						comm.addParameter("@LIMSRejectionCode", "String", null);
						comm.addParameter("@LIMSRejectionDesc", "String", null);
						comm.addParameter("@LIMSRejectedBy", "String", null);
						var affectedRows = comm.executeNonQuery();
						if(affectedRows.Data > 0){
							var conn = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_dict.db"),"","");
							if(conn != null){
								conn.open();
								showTests(test, conn);
								conn.close();
							}							
							dlg.toggle();
							dlg = null;
						}
						else console.log('Already exists');
					}
					
					con.close();
				}
				
				
				
				
			}
		}
	});
	
	var sampleTypes = getSamplesTypes();
	sampleTypes.forEach(function(element){
		$(dlg.el).find(".specimenTypes").append('<option value="'+element.ID+'">'+element.Name+'</option>');
	});
	
	create_custom_dropdowns();
	
	var _specimenTypes = $(dlg.el).find(".select-dropdown.specimenTypes").find(".list");
	if(_specimenTypes != undefined && _specimenTypes != null){
		_specimenTypes.addClass("scroll scroll2");
		_specimenTypes.css({"overflow-y": "auto", "max-height": "200px"});
	}
	
	var _tests = $(dlg.el).find(".select-dropdown.tests").find(".list");
	if(_tests != undefined && _tests != null){
		_tests.addClass("scroll scroll2");
		_tests.css({"overflow-y": "auto", "max-height": "200px"});
	}
	
	var tests = [];
	$(dlg.el).find(".specimenTypes").change(function() {
		var text = $(this).text();
		if(text != "..."){
			var value = $(this).val();
			
			var _tests = $(dlg.el).find(".select-dropdown.tests");
			if(_tests != undefined && _tests != null){
				_tests.remove();
				
				$(dlg.el).find("select.tests").html('<option selected="">...</option>');
				
				tests = getTests(value);
				tests.forEach(function(element){
					$(dlg.el).find("select.tests").append('<option value="'+element.ID+'">'+element.Name+" - "+element.LabSection+'</option>');
				});
				
				create_custom_dropdowns();
				
				_tests = $(dlg.el).find(".select-dropdown.tests").find(".list");
				if(_tests != undefined && _tests != null){
					_tests.addClass("scroll scroll2");
					_tests.css({"overflow-y": "auto", "max-height": "200px"});
				}
			}
		}
		else{
			$(dlg.el).find("select.tests").html('<option selected="">...</option>');
		}
	});
}

function getConsultations(){
	var con = new SqlLiteConnection(System.IO.Path.Combine(getRootPath(),"databases","bhis_data.db"),"","");
	if(con != null){
		con.open();
		
		var query  = "SELECT ";
			query += "	`RequestID`";
			query += "	,`ConsultationDateTime`";
			query += "	,`ConsultedBy`";
			query += "FROM `Consultation` ";
			//query += "WHERE (`RequestID` like @ID)";
			//query += "LIMIT 1 ";
			
		var comm = con.createCommand(query);
		if(comm != null){
			//comm.addParameter("@ID", "String", id);
			
			var reader = comm.executeReader();
			if(reader != null){
				if(reader.read()){
					var row = JSON.parse(reader.getValues());	
					if(row != undefined && row != null){
						 addPendingConsultation(row);
					}
				}
				reader.close();
				con.close();				
			}
			else con.close();
		}
		else con.close();
	}
}

$("#addTests").unbind( "click" );
$("#addTests").click(function(){
	addTest();
});


$(".clear").unbind( "click" );
$(".clear").click(function(){	
	$(".search .submenu").hide();
	$(".search").attr('id', '');
	
	$(".save .submenu").hide();
	$(".save").attr('id', '');
	
	clearData();
	
});

$(".save").unbind( "click" );
$(".save").click(function(){	
	$(".search .submenu").hide();
	$(".search").attr('id', '');
	
	$(".clear .submenu").hide();
	$(".clear").attr('id', '');
	
	console.log(Results);
});

$(".search").mouseup(function(){
	return false;
});
$(".clear").mouseup(function(){
	return false;
});
$(".save").mouseup(function(){
	return false;
});
$(".submenu").mouseup(function(){
	return false;
});

$('.search .submenu .root .nav-button').each(function (index, value) {
	$(this).click(function(){
		var text = $(this).text().trim();
		
		
	});
});
$('.clear .submenu .root .nav-button').each(function (index, value) {
	$(this).click(function(){
		
	});
});
$('.save .submenu .root .nav-button').each(function (index, value) {
	$(this).click(function(){
		
	});
});

getConsultations();

hideNavigationDropMenu();
closeLoadingPage();
</script>